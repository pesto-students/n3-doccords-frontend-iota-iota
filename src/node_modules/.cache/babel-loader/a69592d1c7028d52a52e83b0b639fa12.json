{"ast":null,"code":"var _jsxFileName = \"/Users/elango/Documents/pesto/iota-ninja3-doccords-frontend/src/components/login/index.js\";\n// Import FirebaseAuth and firebase.\nimport React from \"react\";\nimport StyledFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\";\nimport firebase from \"firebase\";\nimport { PROFILES } from \"navigation/constants\"; // Configure Firebase.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDG_6b7GzDixXpfpEXwqlyY6qeg0vavTJ4\",\n  authDomain: \"doccords-55659.firebaseapp.com\",\n  projectId: \"doccords-55659\",\n  storageBucket: \"doccords-55659.appspot.com\",\n  messagingSenderId: \"352225564028\",\n  appId: \"1:352225564028:web:b762256bf74fb69c4400f9\",\n  measurementId: \"G-VGGZF4XZSZ\"\n};\nfirebase.initializeApp(firebaseConfig);\nfirebase.auth().useDeviceLanguage(); // window.recaptchaVerifier = new firebase.auth.RecaptchaVerifier(\n//   \"sign-in-button\",\n//   {\n//     size: \"invisible\",\n//     callback: (response) => {\n//       // reCAPTCHA solved, allow signInWithPhoneNumber.\n//       onSignInSubmit();\n//     },\n//   }\n// );\n// Configure FirebaseUI.\n\nconst uiConfig = {\n  // Popup signin flow rather than redirect flow.\n  signInFlow: \"popup\",\n  // Redirect to /signedIn after sign in is successful. Alternatively you can provide a callbacks.signInSuccess function.\n  signInSuccessUrl: PROFILES,\n  // We will display Google and Facebook as auth providers.\n  signInOptions: [firebase.auth.GoogleAuthProvider.PROVIDER_ID, {\n    provider: firebase.auth.PhoneAuthProvider.PROVIDER_ID,\n    defaultCountry: \"IN\"\n  }]\n};\n\nconst LoginView = () => {\n  const signin = () => {\n    firebase.auth().signInWithPopup(provider).then(result => {\n      /** @type {firebase.auth.OAuthCredential} */\n      var credential = result.credential; // This gives you a Google Access Token. You can use it to access the Google API.\n\n      var token = credential.accessToken; // The signed-in user info.\n\n      var user = result.user; // ...\n    }).catch(error => {\n      // Handle Errors here.\n      var errorCode = error.code;\n      var errorMessage = error.message; // The email of the user's account used.\n\n      var email = error.email; // The firebase.auth.AuthCredential type that was used.\n\n      var credential = error.credential; // ...\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Doccords\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Login or Signup\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: signin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n\n_c = LoginView;\nexport default LoginView;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginView\");","map":{"version":3,"sources":["/Users/elango/Documents/pesto/iota-ninja3-doccords-frontend/src/components/login/index.js"],"names":["React","StyledFirebaseAuth","firebase","PROFILES","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","auth","useDeviceLanguage","uiConfig","signInFlow","signInSuccessUrl","signInOptions","GoogleAuthProvider","PROVIDER_ID","provider","PhoneAuthProvider","defaultCountry","LoginView","signin","signInWithPopup","then","result","credential","token","accessToken","user","catch","error","errorCode","code","errorMessage","message","email"],"mappings":";AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,kBAAP,MAA+B,qCAA/B;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,SAASC,QAAT,QAAyB,sBAAzB,C,CAEA;;;AACA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAE,yCADa;AAErBC,EAAAA,UAAU,EAAE,gCAFS;AAGrBC,EAAAA,SAAS,EAAE,gBAHU;AAIrBC,EAAAA,aAAa,EAAE,4BAJM;AAKrBC,EAAAA,iBAAiB,EAAE,cALE;AAMrBC,EAAAA,KAAK,EAAE,2CANc;AAOrBC,EAAAA,aAAa,EAAE;AAPM,CAAvB;AASAT,QAAQ,CAACU,aAAT,CAAuBR,cAAvB;AACAF,QAAQ,CAACW,IAAT,GAAgBC,iBAAhB,G,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,MAAMC,QAAQ,GAAG;AACf;AACAC,EAAAA,UAAU,EAAE,OAFG;AAGf;AACAC,EAAAA,gBAAgB,EAAEd,QAJH;AAKf;AACAe,EAAAA,aAAa,EAAE,CACbhB,QAAQ,CAACW,IAAT,CAAcM,kBAAd,CAAiCC,WADpB,EAEb;AACEC,IAAAA,QAAQ,EAAEnB,QAAQ,CAACW,IAAT,CAAcS,iBAAd,CAAgCF,WAD5C;AAEEG,IAAAA,cAAc,EAAE;AAFlB,GAFa;AANA,CAAjB;;AAeA,MAAMC,SAAS,GAAG,MAAM;AACtB,QAAMC,MAAM,GAAG,MAAM;AACnBvB,IAAAA,QAAQ,CACLW,IADH,GAEGa,eAFH,CAEmBL,QAFnB,EAGGM,IAHH,CAGSC,MAAD,IAAY;AAChB;AACA,UAAIC,UAAU,GAAGD,MAAM,CAACC,UAAxB,CAFgB,CAIhB;;AACA,UAAIC,KAAK,GAAGD,UAAU,CAACE,WAAvB,CALgB,CAMhB;;AACA,UAAIC,IAAI,GAAGJ,MAAM,CAACI,IAAlB,CAPgB,CAQhB;AACD,KAZH,EAaGC,KAbH,CAaUC,KAAD,IAAW;AAChB;AACA,UAAIC,SAAS,GAAGD,KAAK,CAACE,IAAtB;AACA,UAAIC,YAAY,GAAGH,KAAK,CAACI,OAAzB,CAHgB,CAIhB;;AACA,UAAIC,KAAK,GAAGL,KAAK,CAACK,KAAlB,CALgB,CAMhB;;AACA,UAAIV,UAAU,GAAGK,KAAK,CAACL,UAAvB,CAPgB,CAQhB;AACD,KAtBH;AAuBD,GAxBD;;AAyBA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAIE;AAAQ,MAAA,OAAO,EAAEJ;AAAjB;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAlCD;;KAAMD,S;AAoCN,eAAeA,SAAf","sourcesContent":["// Import FirebaseAuth and firebase.\nimport React from \"react\";\nimport StyledFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\";\nimport firebase from \"firebase\";\nimport { PROFILES } from \"navigation/constants\";\n\n// Configure Firebase.\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDG_6b7GzDixXpfpEXwqlyY6qeg0vavTJ4\",\n  authDomain: \"doccords-55659.firebaseapp.com\",\n  projectId: \"doccords-55659\",\n  storageBucket: \"doccords-55659.appspot.com\",\n  messagingSenderId: \"352225564028\",\n  appId: \"1:352225564028:web:b762256bf74fb69c4400f9\",\n  measurementId: \"G-VGGZF4XZSZ\",\n};\nfirebase.initializeApp(firebaseConfig);\nfirebase.auth().useDeviceLanguage();\n// window.recaptchaVerifier = new firebase.auth.RecaptchaVerifier(\n//   \"sign-in-button\",\n//   {\n//     size: \"invisible\",\n//     callback: (response) => {\n//       // reCAPTCHA solved, allow signInWithPhoneNumber.\n//       onSignInSubmit();\n//     },\n//   }\n// );\n\n// Configure FirebaseUI.\nconst uiConfig = {\n  // Popup signin flow rather than redirect flow.\n  signInFlow: \"popup\",\n  // Redirect to /signedIn after sign in is successful. Alternatively you can provide a callbacks.signInSuccess function.\n  signInSuccessUrl: PROFILES,\n  // We will display Google and Facebook as auth providers.\n  signInOptions: [\n    firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n    {\n      provider: firebase.auth.PhoneAuthProvider.PROVIDER_ID,\n      defaultCountry: \"IN\",\n    },\n  ],\n};\n\nconst LoginView = () => {\n  const signin = () => {\n    firebase\n      .auth()\n      .signInWithPopup(provider)\n      .then((result) => {\n        /** @type {firebase.auth.OAuthCredential} */\n        var credential = result.credential;\n\n        // This gives you a Google Access Token. You can use it to access the Google API.\n        var token = credential.accessToken;\n        // The signed-in user info.\n        var user = result.user;\n        // ...\n      })\n      .catch((error) => {\n        // Handle Errors here.\n        var errorCode = error.code;\n        var errorMessage = error.message;\n        // The email of the user's account used.\n        var email = error.email;\n        // The firebase.auth.AuthCredential type that was used.\n        var credential = error.credential;\n        // ...\n      });\n  };\n  return (\n    <div>\n      <h1>Doccords</h1>\n      <p>Login or Signup</p>\n      {/* <StyledFirebaseAuth uiConfig={uiConfig} firebaseAuth={firebase.auth()} /> */}\n      <button onClick={signin} />\n    </div>\n  );\n};\n\nexport default LoginView;\n"]},"metadata":{},"sourceType":"module"}