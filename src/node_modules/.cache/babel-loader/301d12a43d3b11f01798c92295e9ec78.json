{"ast":null,"code":"var _jsxFileName = \"/Users/elango/Documents/pesto/iota-ninja3-doccords-frontend/src/navigation/PrivateRoute.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react/prop-types */\n// A wrapper for <Route> that redirects to the login\nimport React, { useEffect, useSelector } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Redirect, Route } from \"react-router-dom\";\nimport { useAuth } from \"context/AuthContext\";\nimport { fetchUserDetail } from \"apiRequests/user\"; // screen if you're not yet authenticated.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PrivateRoute = ({\n  children,\n  ...rest\n}) => {\n  _s();\n\n  const userDetail = useSelector(state => state.user.userDetail);\n  const {\n    currentUser\n  } = useAuth();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    fetchUserDetail(dispatch);\n  }, []); // return (\n  //   <Route\n  //     {...rest}\n  //     render={() =>\n  //       currentUser ? (\n  //         <>\n  //           {children}\n  //           <br />\n  //           <div>This is a user protected route</div>\n  //         </>\n  //       ) : (\n  //         <Redirect\n  //           to={{\n  //             pathname: \"/login\",\n  //           }}\n  //         />\n  //       )\n  //     }\n  //   />\n  // );\n\n  if (currentUser) {\n    if (userDetail.profileType === \"user\") {} else if (userDetail.profileType === \"admin\") {}\n  } else {\n    return /*#__PURE__*/_jsxDEV(Redirect, { ...rest,\n      render: () => /*#__PURE__*/_jsxDEV(Redirect, {\n        to: {\n          pathname: \"/login\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 23\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_s(PrivateRoute, \"ECrjmvpVkbUWkWoD2xMJdDhwUXM=\", false, function () {\n  return [useSelector, useAuth, useDispatch];\n});\n\n_c = PrivateRoute;\nexport default PrivateRoute;\n/**\n * Below code can be organized in separate files as desired.\n * I am keeping everything related to the authentication and PrivateRoute in this one file.\n */\n\n/*\nconst authContext = createContext();\nexport function ProvideAuth({ children }) {\n  const auth = useProvideAuth();\n  return (\n    <authContext.Provider value={auth}>\n      {children}\n    </authContext.Provider>\n  );\n}\n\n// Most important hook to be used throughout\nexport function useAuth() {\n  return useContext(authContext);\n}\n*/\n\n/*\nfunction useProvideAuth() {\n  const [user, setUser] = useState(null);\n\n  // signin method: It can either return a promise or execute a callback function.\n  // You can prefer to keep this in userServices.js\n  const signin = () => {\n    console.log(\"SS:: PrivateRoute > useProviderAuth > signin() called...\");\n    return new Promise((resolve, reject) => {\n      try {\n        // do db call or API endpoint axios call here and return the promise.\n        let apiResponse = {\n          \"id\": \"30\",\n          \"firstName\": \"Joel\",\n          \"lastName\": \"Joseph\",\n          \"gender\": \"Male\",\n          \"age\": 33,\n          \"isActiveEmployee\": true,\n          \"location\": \"London\"\n        };\n        setUser(apiResponse);\n        setTimeout(()=>resolve(apiResponse), 3000);\n        // resolve(apiResponse);\n      } catch (error) {\n        console.error(\"signin error!==\", error);\n        reject(\"signin error!\");\n      }\n    });\n  };\n  const signout = () => {\n    return new Promise((resolve, reject) => {\n      try {\n        // do API endpoint axios call here and return the promise.\n        setUser(null);\n        resolve(true);\n      } catch (error) {\n        console.error(\"signout error!==\", error);\n        reject(\"signout error!\");\n      }\n    });\n  };\n\n  // Firebase auth example code (ref: https://usehooks.com/useAuth/)\n  // const signin = (email, password) => {\n  //   return firebase\n  //     .auth()\n  //     .signInWithEmailAndPassword(email, password)\n  //     .then(response => {\n  //       setUser(response.user);\n  //       return response.user;\n  //     });\n  // };\n  // const signout = () => {\n  //   return firebase\n  //     .auth()\n  //     .signOut()\n  //     .then(() => {\n  //       setUser(false);\n  //     });\n  // };\n  \n  return {\n    user,\n    signin,\n    signout\n  };\n}\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"sources":["/Users/elango/Documents/pesto/iota-ninja3-doccords-frontend/src/navigation/PrivateRoute.js"],"names":["React","useEffect","useSelector","useDispatch","Redirect","Route","useAuth","fetchUserDetail","PrivateRoute","children","rest","userDetail","state","user","currentUser","dispatch","profileType","pathname"],"mappings":";;;AAAA;AACA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,WAA3B,QAA8C,OAA9C;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,QAAT,EAAmBC,KAAnB,QAAgC,kBAAhC;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,SAASC,eAAT,QAAgC,kBAAhC,C,CAEA;;;;AACA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAY,KAAGC;AAAf,CAAD,KAA2B;AAAA;;AAC9C,QAAMC,UAAU,GAAGT,WAAW,CAAEU,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWF,UAAvB,CAA9B;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAkBR,OAAO,EAA/B;AACA,QAAMS,QAAQ,GAAGZ,WAAW,EAA5B;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,eAAe,CAACQ,QAAD,CAAf;AACD,GAFQ,EAEN,EAFM,CAAT,CAL8C,CAQ9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAID,WAAJ,EAAiB;AACf,QAAIH,UAAU,CAACK,WAAX,KAA2B,MAA/B,EAAuC,CACtC,CADD,MACO,IAAIL,UAAU,CAACK,WAAX,KAA2B,OAA/B,EAAwC,CAC9C;AACF,GAJD,MAIO;AACL,wBACE,QAAC,QAAD,OACMN,IADN;AAEE,MAAA,MAAM,EAAE,mBAAM,QAAC,QAAD;AAAU,QAAA,EAAE,EAAE;AAAEO,UAAAA,QAAQ,EAAE;AAAZ;AAAd;AAAA;AAAA;AAAA;AAAA;AAFhB;AAAA;AAAA;AAAA;AAAA,YADF;AAMD;AACF,CAxCD;;GAAMT,Y;UACeN,W,EACKI,O,EACPH,W;;;KAHbK,Y;AAyCN,eAAeA,YAAf;AAEA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/* eslint-disable react/prop-types */\n// A wrapper for <Route> that redirects to the login\nimport React, { useEffect, useSelector } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Redirect, Route } from \"react-router-dom\";\nimport { useAuth } from \"context/AuthContext\";\nimport { fetchUserDetail } from \"apiRequests/user\";\n\n// screen if you're not yet authenticated.\nconst PrivateRoute = ({ children, ...rest }) => {\n  const userDetail = useSelector((state) => state.user.userDetail);\n  const { currentUser } = useAuth();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    fetchUserDetail(dispatch);\n  }, []);\n  // return (\n  //   <Route\n  //     {...rest}\n  //     render={() =>\n  //       currentUser ? (\n  //         <>\n  //           {children}\n  //           <br />\n  //           <div>This is a user protected route</div>\n  //         </>\n  //       ) : (\n  //         <Redirect\n  //           to={{\n  //             pathname: \"/login\",\n  //           }}\n  //         />\n  //       )\n  //     }\n  //   />\n  // );\n  if (currentUser) {\n    if (userDetail.profileType === \"user\") {\n    } else if (userDetail.profileType === \"admin\") {\n    }\n  } else {\n    return (\n      <Redirect\n        {...rest}\n        render={() => <Redirect to={{ pathname: \"/login\" }} />}\n      />\n    );\n  }\n};\nexport default PrivateRoute;\n\n/**\n * Below code can be organized in separate files as desired.\n * I am keeping everything related to the authentication and PrivateRoute in this one file.\n */\n/*\nconst authContext = createContext();\nexport function ProvideAuth({ children }) {\n  const auth = useProvideAuth();\n  return (\n    <authContext.Provider value={auth}>\n      {children}\n    </authContext.Provider>\n  );\n}\n\n// Most important hook to be used throughout\nexport function useAuth() {\n  return useContext(authContext);\n}\n*/\n\n/*\nfunction useProvideAuth() {\n  const [user, setUser] = useState(null);\n\n  // signin method: It can either return a promise or execute a callback function.\n  // You can prefer to keep this in userServices.js\n  const signin = () => {\n    console.log(\"SS:: PrivateRoute > useProviderAuth > signin() called...\");\n    return new Promise((resolve, reject) => {\n      try {\n        // do db call or API endpoint axios call here and return the promise.\n        let apiResponse = {\n          \"id\": \"30\",\n          \"firstName\": \"Joel\",\n          \"lastName\": \"Joseph\",\n          \"gender\": \"Male\",\n          \"age\": 33,\n          \"isActiveEmployee\": true,\n          \"location\": \"London\"\n        };\n        setUser(apiResponse);\n        setTimeout(()=>resolve(apiResponse), 3000);\n        // resolve(apiResponse);\n      } catch (error) {\n        console.error(\"signin error!==\", error);\n        reject(\"signin error!\");\n      }\n    });\n  };\n  const signout = () => {\n    return new Promise((resolve, reject) => {\n      try {\n        // do API endpoint axios call here and return the promise.\n        setUser(null);\n        resolve(true);\n      } catch (error) {\n        console.error(\"signout error!==\", error);\n        reject(\"signout error!\");\n      }\n    });\n  };\n\n  // Firebase auth example code (ref: https://usehooks.com/useAuth/)\n  // const signin = (email, password) => {\n  //   return firebase\n  //     .auth()\n  //     .signInWithEmailAndPassword(email, password)\n  //     .then(response => {\n  //       setUser(response.user);\n  //       return response.user;\n  //     });\n  // };\n  // const signout = () => {\n  //   return firebase\n  //     .auth()\n  //     .signOut()\n  //     .then(() => {\n  //       setUser(false);\n  //     });\n  // };\n  \n  return {\n    user,\n    signin,\n    signout\n  };\n}\n*/\n"]},"metadata":{},"sourceType":"module"}