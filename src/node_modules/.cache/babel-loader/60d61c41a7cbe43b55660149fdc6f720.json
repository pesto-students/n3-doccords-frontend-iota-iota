{"ast":null,"code":"import customAxios from \"apiRequests/customAxios\";\nimport { DELETE_HEALTH_TOPICS_URL, CREATE_HEALTH_TOPICS_URL, UPDATE_HEALTH_TOPICS_URL, ADMIN_ARTICLES_URL } from \"apiRequests/constants\";\nimport { setAllHealthTopics, setUploadedImageURL, setAllArticles } from \"redux/actions/common\";\nexport const deleteHealthTopic = healthTopicId => async (dispatch, getState) => {\n  const deleteHealthTopic = await customAxios.delete(`${DELETE_HEALTH_TOPICS_URL}/${healthTopicId}`);\n\n  if (deleteHealthTopic.data.success) {\n    const removedArr = getState().common.healthTopics.filter(healthTopic => healthTopic.healthTopicId !== healthTopicId);\n    dispatch(setAllHealthTopics(removedArr));\n  } else {\n    console.log(deleteHealthTopic.data);\n  }\n};\nexport const createNewHealthTopic = (title, picture, history) => async (dispatch, getState) => {\n  const newHealthTopic = await customAxios.post(CREATE_HEALTH_TOPICS_URL, {\n    title,\n    picture\n  });\n  const healthTopicsArray = getState().common.healthTopics;\n\n  if (newHealthTopic.data.success) {\n    healthTopicsArray.unshift(newHealthTopic.data.data);\n    console.log(healthTopicsArray);\n    dispatch(setAllHealthTopics(healthTopicsArray));\n    dispatch(setUploadedImageURL(\"\"));\n    history.push(\"/admin/healthTopics\");\n  }\n};\nexport const updateHealthTopic = (healthTopicId, title, picture, history) => async (dispatch, getState) => {\n  const updatedHealthTopic = await customAxios.put(`${UPDATE_HEALTH_TOPICS_URL}/${healthTopicId}`, {\n    title,\n    picture\n  });\n\n  if (updatedHealthTopic.status) {\n    const healthTopicsArray = getState().common.healthTopics;\n    const updatedHealthTopics = healthTopicsArray.map(healthTopic => {\n      if (healthTopic.healthTopicId === healthTopicId) {\n        healthTopic.title = updatedHealthTopic.data.title;\n        healthTopic.picture = updatedHealthTopic.data.picture;\n      }\n\n      return healthTopic;\n    });\n    dispatch(setAllHealthTopics(updatedHealthTopics));\n    dispatch(setUploadedImageURL(\"\"));\n    history.push(\"/admin/healthTopics\");\n  }\n};\nexport const createNewArticle = (title, description, picture, healthTopicId, history) => async (dispatch, getState) => {\n  console.log(title, description, picture, healthTopicId, history);\n  const createdArticle = await customAxios.post(ADMIN_ARTICLES_URL, {\n    title,\n    description,\n    picture,\n    healthTopicId\n  });\n  const articlesArray = getState().common.articles;\n\n  if (createdArticle.data.success) {\n    articlesArray.unshift(createdArticle.data.data);\n    dispatch(setAllArticles(articlesArray));\n    dispatch(setUploadedImageURL(\"\"));\n    history.push(\"/admin/articles\");\n  }\n};\nexport const updateArticle = (articleId, title, description, picture, healthTopicId, history) => async (dispatch, getState) => {\n  const updatedArticle = await customAxios.put(`${ADMIN_ARTICLES_URL}/${articleId}`, {\n    title,\n    description,\n    picture,\n    healthTopicId\n  });\n\n  if (updatedArticle.status) {\n    const articlesArray = getState().common.articles;\n    const updatedArticles = articlesArray.map(article => {\n      if (article.articleId === articleId) {\n        article.title = updatedArticle.data.title;\n        article.picture = updatedArticle.data.picture;\n        article.description = updatedArticle.data.description;\n        article.healthTopicId = updatedArticle.data.healthTopicId;\n      }\n\n      return article;\n    });\n    dispatch(setAllArticles(updatedArticles));\n    dispatch(setUploadedImageURL(\"\"));\n    history.push(\"/admin/articles\");\n  }\n};\nexport const deleteArticle = healthTopicId => async (dispatch, getState) => {\n  const deleteHealthTopic = await customAxios.delete(`${ADMIN_ARTICLES_URL}/${healthTopicId}`);\n\n  if (deleteHealthTopic.data.success) {\n    const removedArr = getState().common.healthTopics.filter(healthTopic => healthTopic.healthTopicId !== healthTopicId);\n    dispatch(setAllHealthTopics(removedArr));\n  } else {\n    console.log(deleteHealthTopic.data);\n  }\n};","map":{"version":3,"sources":["/Users/elango/Documents/pesto/iota-ninja3-doccords-frontend/src/apiRequests/admin.js"],"names":["customAxios","DELETE_HEALTH_TOPICS_URL","CREATE_HEALTH_TOPICS_URL","UPDATE_HEALTH_TOPICS_URL","ADMIN_ARTICLES_URL","setAllHealthTopics","setUploadedImageURL","setAllArticles","deleteHealthTopic","healthTopicId","dispatch","getState","delete","data","success","removedArr","common","healthTopics","filter","healthTopic","console","log","createNewHealthTopic","title","picture","history","newHealthTopic","post","healthTopicsArray","unshift","push","updateHealthTopic","updatedHealthTopic","put","status","updatedHealthTopics","map","createNewArticle","description","createdArticle","articlesArray","articles","updateArticle","articleId","updatedArticle","updatedArticles","article","deleteArticle"],"mappings":"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","sourcesContent":["import customAxios from \"apiRequests/customAxios\";\nimport {\n  DELETE_HEALTH_TOPICS_URL,\n  CREATE_HEALTH_TOPICS_URL,\n  UPDATE_HEALTH_TOPICS_URL,\n  ADMIN_ARTICLES_URL,\n} from \"apiRequests/constants\";\nimport {\n  setAllHealthTopics,\n  setUploadedImageURL,\n  setAllArticles,\n} from \"redux/actions/common\";\n\nexport const deleteHealthTopic =\n  (healthTopicId) => async (dispatch, getState) => {\n    const deleteHealthTopic = await customAxios.delete(\n      `${DELETE_HEALTH_TOPICS_URL}/${healthTopicId}`\n    );\n    if (deleteHealthTopic.data.success) {\n      const removedArr = getState().common.healthTopics.filter(\n        (healthTopic) => healthTopic.healthTopicId !== healthTopicId\n      );\n      dispatch(setAllHealthTopics(removedArr));\n    } else {\n      console.log(deleteHealthTopic.data);\n    }\n  };\n\nexport const createNewHealthTopic =\n  (title, picture, history) => async (dispatch, getState) => {\n    const newHealthTopic = await customAxios.post(CREATE_HEALTH_TOPICS_URL, {\n      title,\n      picture,\n    });\n    const healthTopicsArray = getState().common.healthTopics;\n    if (newHealthTopic.data.success) {\n      healthTopicsArray.unshift(newHealthTopic.data.data);\n      console.log(healthTopicsArray);\n      dispatch(setAllHealthTopics(healthTopicsArray));\n      dispatch(setUploadedImageURL(\"\"));\n      history.push(\"/admin/healthTopics\");\n    }\n  };\n\nexport const updateHealthTopic =\n  (healthTopicId, title, picture, history) => async (dispatch, getState) => {\n    const updatedHealthTopic = await customAxios.put(\n      `${UPDATE_HEALTH_TOPICS_URL}/${healthTopicId}`,\n      {\n        title,\n        picture,\n      }\n    );\n    if (updatedHealthTopic.status) {\n      const healthTopicsArray = getState().common.healthTopics;\n      const updatedHealthTopics = healthTopicsArray.map((healthTopic) => {\n        if (healthTopic.healthTopicId === healthTopicId) {\n          healthTopic.title = updatedHealthTopic.data.title;\n          healthTopic.picture = updatedHealthTopic.data.picture;\n        }\n        return healthTopic;\n      });\n      dispatch(setAllHealthTopics(updatedHealthTopics));\n      dispatch(setUploadedImageURL(\"\"));\n      history.push(\"/admin/healthTopics\");\n    }\n  };\n\nexport const createNewArticle =\n  (title, description, picture, healthTopicId, history) =>\n  async (dispatch, getState) => {\n    console.log(title, description, picture, healthTopicId, history);\n    const createdArticle = await customAxios.post(ADMIN_ARTICLES_URL, {\n      title,\n      description,\n      picture,\n      healthTopicId,\n    });\n    const articlesArray = getState().common.articles;\n    if (createdArticle.data.success) {\n      articlesArray.unshift(createdArticle.data.data);\n      dispatch(setAllArticles(articlesArray));\n      dispatch(setUploadedImageURL(\"\"));\n      history.push(\"/admin/articles\");\n    }\n  };\n\nexport const updateArticle =\n  (articleId, title, description, picture, healthTopicId, history) =>\n  async (dispatch, getState) => {\n    const updatedArticle = await customAxios.put(\n      `${ADMIN_ARTICLES_URL}/${articleId}`,\n      {\n        title,\n        description,\n        picture,\n        healthTopicId,\n      }\n    );\n\n    if (updatedArticle.status) {\n      const articlesArray = getState().common.articles;\n      const updatedArticles = articlesArray.map((article) => {\n        if (article.articleId === articleId) {\n          article.title = updatedArticle.data.title;\n          article.picture = updatedArticle.data.picture;\n          article.description = updatedArticle.data.description;\n          article.healthTopicId = updatedArticle.data.healthTopicId;\n        }\n        return article;\n      });\n      dispatch(setAllArticles(updatedArticles));\n      dispatch(setUploadedImageURL(\"\"));\n      history.push(\"/admin/articles\");\n    }\n  };\nexport const deleteArticle = (healthTopicId) => async (dispatch, getState) => {\n  const deleteHealthTopic = await customAxios.delete(\n    `${ADMIN_ARTICLES_URL}/${healthTopicId}`\n  );\n  if (deleteHealthTopic.data.success) {\n    const removedArr = getState().common.healthTopics.filter(\n      (healthTopic) => healthTopic.healthTopicId !== healthTopicId\n    );\n    dispatch(setAllHealthTopics(removedArr));\n  } else {\n    console.log(deleteHealthTopic.data);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}