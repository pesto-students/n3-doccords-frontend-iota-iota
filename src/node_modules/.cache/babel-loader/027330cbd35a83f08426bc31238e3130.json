{"ast":null,"code":"var _jsxFileName = \"/Users/elango/Documents/pesto/iota-ninja3-doccords-frontend/src/components/login/index.js\",\n    _s = $RefreshSig$();\n\n// Import FirebaseAuth and firebase.\nimport React from \"react\";\nimport firebase from \"firebase/app\"; // import { auth } from \"firebaseSetup\";\n\nimport { useAuth } from \"context/AuthContext\";\nimport StyledFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\";\nimport { SETUP_PROFILE } from \"navigation/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconsole.log(firebase.auth); // Configure FirebaseUI.\n\nconst uiConfig = {\n  callbacks: {\n    signInSuccessWithAuthResult: function (authResult, redirectUrl) {\n      // firebase\n      //   .auth()\n      //   .currentUser.getIdToken(true)\n      //   .then(function (idToken) {\n      //     // Send token to your backend via HTTPS\n      //     // ...\n      //     console.log(\"tokennnnnnnnnn\", idToken);\n      //   })\n      //   .catch(function (error) {\n      //     console.error(error);\n      //   });\n      // localStorage.setItem(\"doccords_user\", JSON.stringify(user));\n      // console.log(authResult);\n      return false;\n    },\n    signInFailure: function (error) {\n      return console.log(error);\n    }\n  },\n  signInFlow: \"popup\",\n  signInSuccessUrl: SETUP_PROFILE,\n  signInOptions: [{\n    provider: auth.GoogleAuthProvider.PROVIDER_ID,\n    fullLabel: \"Login or Register with Google\"\n  }, {\n    provider: auth.FacebookAuthProvider.PROVIDER_ID,\n    fullLabel: \"Login or Register with Facebook\"\n  }, {\n    provider: auth.PhoneAuthProvider.PROVIDER_ID,\n    recaptchaParameters: {\n      type: \"image\",\n      // 'audio'\n      size: \"invisible\",\n      // 'invisible' or 'compact'\n      badge: \"bottomleft\" // 'bottomright' or 'inline' applies to invisible.\n\n    },\n    fullLabel: \"Login or Register with Phone\",\n    defaultCountry: \"IN\"\n  }]\n};\n\nconst LoginView = () => {\n  _s();\n\n  const {\n    currentUser,\n    logout\n  } = useAuth();\n\n  if (currentUser) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Logged in\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: logout,\n        children: \"signout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Doccords\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Login or Signup\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyledFirebaseAuth, {\n        uiConfig: uiConfig,\n        firebaseAuth: auth()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_s(LoginView, \"irPLFJ3DqMTL8RNRVsehGT4mySY=\", false, function () {\n  return [useAuth];\n});\n\n_c = LoginView;\nexport default LoginView;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginView\");","map":{"version":3,"sources":["/Users/elango/Documents/pesto/iota-ninja3-doccords-frontend/src/components/login/index.js"],"names":["React","firebase","useAuth","StyledFirebaseAuth","SETUP_PROFILE","console","log","auth","uiConfig","callbacks","signInSuccessWithAuthResult","authResult","redirectUrl","signInFailure","error","signInFlow","signInSuccessUrl","signInOptions","provider","GoogleAuthProvider","PROVIDER_ID","fullLabel","FacebookAuthProvider","PhoneAuthProvider","recaptchaParameters","type","size","badge","defaultCountry","LoginView","currentUser","logout"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,cAArB,C,CACA;;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,OAAOC,kBAAP,MAA+B,qCAA/B;AACA,SAASC,aAAT,QAA8B,sBAA9B;;AACAC,OAAO,CAACC,GAAR,CAAYL,QAAQ,CAACM,IAArB,E,CACA;;AACA,MAAMC,QAAQ,GAAG;AACfC,EAAAA,SAAS,EAAE;AACTC,IAAAA,2BAA2B,EAAE,UAAUC,UAAV,EAAsBC,WAAtB,EAAmC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAO,KAAP;AACD,KAhBQ;AAiBTC,IAAAA,aAAa,EAAE,UAAUC,KAAV,EAAiB;AAC9B,aAAOT,OAAO,CAACC,GAAR,CAAYQ,KAAZ,CAAP;AACD;AAnBQ,GADI;AAsBfC,EAAAA,UAAU,EAAE,OAtBG;AAuBfC,EAAAA,gBAAgB,EAAEZ,aAvBH;AAwBfa,EAAAA,aAAa,EAAE,CACb;AACEC,IAAAA,QAAQ,EAAEX,IAAI,CAACY,kBAAL,CAAwBC,WADpC;AAEEC,IAAAA,SAAS,EAAE;AAFb,GADa,EAKb;AACEH,IAAAA,QAAQ,EAAEX,IAAI,CAACe,oBAAL,CAA0BF,WADtC;AAEEC,IAAAA,SAAS,EAAE;AAFb,GALa,EASb;AACEH,IAAAA,QAAQ,EAAEX,IAAI,CAACgB,iBAAL,CAAuBH,WADnC;AAEEI,IAAAA,mBAAmB,EAAE;AACnBC,MAAAA,IAAI,EAAE,OADa;AACJ;AACfC,MAAAA,IAAI,EAAE,WAFa;AAEA;AACnBC,MAAAA,KAAK,EAAE,YAHY,CAGE;;AAHF,KAFvB;AAOEN,IAAAA,SAAS,EAAE,8BAPb;AASEO,IAAAA,cAAc,EAAE;AATlB,GATa;AAxBA,CAAjB;;AA8CA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACtB,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAA0B7B,OAAO,EAAvC;;AAEA,MAAI4B,WAAJ,EAAiB;AACf,wBACE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAQ,QAAA,OAAO,EAAEC,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAMD,GAPD,MAOO;AACL,wBACE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,kBAAD;AAAoB,QAAA,QAAQ,EAAEvB,QAA9B;AAAwC,QAAA,YAAY,EAAED,IAAI;AAA1D;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAOD;AACF,CAnBD;;GAAMsB,S;UAC4B3B,O;;;KAD5B2B,S;AAqBN,eAAeA,SAAf","sourcesContent":["// Import FirebaseAuth and firebase.\nimport React from \"react\";\nimport firebase from \"firebase/app\";\n// import { auth } from \"firebaseSetup\";\nimport { useAuth } from \"context/AuthContext\";\nimport StyledFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\";\nimport { SETUP_PROFILE } from \"navigation/constants\";\nconsole.log(firebase.auth);\n// Configure FirebaseUI.\nconst uiConfig = {\n  callbacks: {\n    signInSuccessWithAuthResult: function (authResult, redirectUrl) {\n      // firebase\n      //   .auth()\n      //   .currentUser.getIdToken(true)\n      //   .then(function (idToken) {\n      //     // Send token to your backend via HTTPS\n      //     // ...\n      //     console.log(\"tokennnnnnnnnn\", idToken);\n      //   })\n      //   .catch(function (error) {\n      //     console.error(error);\n      //   });\n      // localStorage.setItem(\"doccords_user\", JSON.stringify(user));\n      // console.log(authResult);\n      return false;\n    },\n    signInFailure: function (error) {\n      return console.log(error);\n    },\n  },\n  signInFlow: \"popup\",\n  signInSuccessUrl: SETUP_PROFILE,\n  signInOptions: [\n    {\n      provider: auth.GoogleAuthProvider.PROVIDER_ID,\n      fullLabel: \"Login or Register with Google\",\n    },\n    {\n      provider: auth.FacebookAuthProvider.PROVIDER_ID,\n      fullLabel: \"Login or Register with Facebook\",\n    },\n    {\n      provider: auth.PhoneAuthProvider.PROVIDER_ID,\n      recaptchaParameters: {\n        type: \"image\", // 'audio'\n        size: \"invisible\", // 'invisible' or 'compact'\n        badge: \"bottomleft\", // 'bottomright' or 'inline' applies to invisible.\n      },\n      fullLabel: \"Login or Register with Phone\",\n\n      defaultCountry: \"IN\",\n    },\n  ],\n};\nconst LoginView = () => {\n  const { currentUser, logout } = useAuth();\n\n  if (currentUser) {\n    return (\n      <div>\n        <p>Logged in</p>\n        <button onClick={logout}>signout</button>\n      </div>\n    );\n  } else {\n    return (\n      <div>\n        <h1>Doccords</h1>\n        <p>Login or Signup</p>\n        <StyledFirebaseAuth uiConfig={uiConfig} firebaseAuth={auth()} />\n      </div>\n    );\n  }\n};\n\nexport default LoginView;\n"]},"metadata":{},"sourceType":"module"}