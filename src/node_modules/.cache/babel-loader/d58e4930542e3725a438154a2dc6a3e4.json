{"ast":null,"code":"var _jsxFileName = \"/Users/elango/Documents/pesto/iota-ninja3-doccords-frontend/src/navigation/PrivateRoute.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react/prop-types */\n// A wrapper for <Route> that redirects to the login\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Redirect, Route } from \"react-router-dom\";\nimport { useAuth } from \"context/AuthContext\";\nimport { fetchUserDetail } from \"apiRequests/user\"; // screen if you're not yet authenticated.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PrivateRoute = ({\n  children,\n  ...rest\n}) => {\n  _s();\n\n  const userDetail = useSelector(state => state.user.userDetail);\n  const {\n    currentUser\n  } = useAuth();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (currentUser) {\n      console.log(\"came here\");\n      fetchUserDetail(dispatch);\n    } else {\n      /*#__PURE__*/\n      _jsxDEV(Redirect, {\n        to: {\n          pathname: \"/login\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 7\n      }, this);\n    }\n  }, []);\n\n  if (currentUser && userDetail.profileType === \"free\") {\n    return /*#__PURE__*/_jsxDEV(Route, { ...rest,\n      render: () => children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 12\n    }, this);\n  } else if (currentUser && userDetail.profileType === \"admin\") {\n    return /*#__PURE__*/_jsxDEV(Route, { ...rest,\n      render: () => /*#__PURE__*/_jsxDEV(Redirect, {\n        to: {\n          pathname: \"/admin\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 23\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_s(PrivateRoute, \"ECrjmvpVkbUWkWoD2xMJdDhwUXM=\", false, function () {\n  return [useSelector, useAuth, useDispatch];\n});\n\n_c = PrivateRoute;\nexport default PrivateRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"sources":["/Users/elango/Documents/pesto/iota-ninja3-doccords-frontend/src/navigation/PrivateRoute.js"],"names":["React","useEffect","useDispatch","useSelector","Redirect","Route","useAuth","fetchUserDetail","PrivateRoute","children","rest","userDetail","state","user","currentUser","dispatch","console","log","pathname","profileType"],"mappings":";;;AAAA;AACA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,QAAT,EAAmBC,KAAnB,QAAgC,kBAAhC;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,SAASC,eAAT,QAAgC,kBAAhC,C,CAEA;;;;AACA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAY,KAAGC;AAAf,CAAD,KAA2B;AAAA;;AAC9C,QAAMC,UAAU,GAAGR,WAAW,CAAES,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWF,UAAvB,CAA9B;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAkBR,OAAO,EAA/B;AACA,QAAMS,QAAQ,GAAGb,WAAW,EAA5B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,WAAJ,EAAiB;AACfE,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAV,MAAAA,eAAe,CAACQ,QAAD,CAAf;AACD,KAHD,MAGO;AACL;AAAA,cAAC,QAAD;AAAU,QAAA,EAAE,EAAE;AAAEG,UAAAA,QAAQ,EAAE;AAAZ;AAAd;AAAA;AAAA;AAAA;AAAA;AACD;AACF,GAPQ,EAON,EAPM,CAAT;;AASA,MAAIJ,WAAW,IAAIH,UAAU,CAACQ,WAAX,KAA2B,MAA9C,EAAsD;AACpD,wBAAO,QAAC,KAAD,OAAWT,IAAX;AAAiB,MAAA,MAAM,EAAE,MAAMD;AAA/B;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFD,MAEO,IAAIK,WAAW,IAAIH,UAAU,CAACQ,WAAX,KAA2B,OAA9C,EAAuD;AAC5D,wBACE,QAAC,KAAD,OACMT,IADN;AAEE,MAAA,MAAM,EAAE,mBAAM,QAAC,QAAD;AAAU,QAAA,EAAE,EAAE;AAAEQ,UAAAA,QAAQ,EAAE;AAAZ;AAAd;AAAA;AAAA;AAAA;AAAA;AAFhB;AAAA;AAAA;AAAA;AAAA,YADF;AAMD;AACF,CAxBD;;GAAMV,Y;UACeL,W,EACKG,O,EACPJ,W;;;KAHbM,Y;AAyBN,eAAeA,YAAf","sourcesContent":["/* eslint-disable react/prop-types */\n// A wrapper for <Route> that redirects to the login\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Redirect, Route } from \"react-router-dom\";\nimport { useAuth } from \"context/AuthContext\";\nimport { fetchUserDetail } from \"apiRequests/user\";\n\n// screen if you're not yet authenticated.\nconst PrivateRoute = ({ children, ...rest }) => {\n  const userDetail = useSelector((state) => state.user.userDetail);\n  const { currentUser } = useAuth();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (currentUser) {\n      console.log(\"came here\");\n      fetchUserDetail(dispatch);\n    } else {\n      <Redirect to={{ pathname: \"/login\" }} />;\n    }\n  }, []);\n\n  if (currentUser && userDetail.profileType === \"free\") {\n    return <Route {...rest} render={() => children} />;\n  } else if (currentUser && userDetail.profileType === \"admin\") {\n    return (\n      <Route\n        {...rest}\n        render={() => <Redirect to={{ pathname: \"/admin\" }} />}\n      />\n    );\n  }\n};\nexport default PrivateRoute;\n"]},"metadata":{},"sourceType":"module"}