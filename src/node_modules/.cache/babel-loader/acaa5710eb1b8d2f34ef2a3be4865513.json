{"ast":null,"code":"var _jsxFileName = \"/Users/elango/Documents/pesto/iota-ninja3-doccords-frontend/src/context/AuthContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { auth } from \"firebaseSetup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext();\n\nfunction useAuth() {\n  _s();\n\n  return useContext(AuthContext);\n}\n\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport const fetchToken = () => {\n  return auth.currentUser.getIdToken(true);\n};\nexport function AuthProvider({\n  children\n}) {\n  _s2();\n\n  const [currentUser, setCurrentUser] = useState();\n  const [loading, setLoading] = useState(true); // function signup(email, password) {\n  //   return auth.createUserWithEmailAndPassword(email, password);\n  // }\n  // function login(email, password) {\n  //   return auth.signInWithEmailAndPassword(email, password);\n  // }\n\n  const logout = () => {\n    return auth.signOut();\n  }; // function resetPassword(email) {\n  //   return auth.sendPasswordResetEmail(email);\n  // }\n  // function updateEmail(email) {\n  //   return currentUser.updateEmail(email);\n  // }\n  // function updatePassword(password) {\n  //   return currentUser.updatePassword(password);\n  // }\n\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(user => {\n      console.log(user);\n      setCurrentUser(user);\n      setLoading(false);\n    });\n    return unsubscribe;\n  }, []);\n  const value = {\n    currentUser,\n    // login,\n    // signup,\n    logout,\n    fetchToken // resetPassword,\n    // updateEmail,\n    // updatePassword,\n\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(AuthProvider, \"1cdeWWSmbSz3cOWqWLAt+Ta4DMY=\");\n\n_c = AuthProvider;\nAuthProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/Users/elango/Documents/pesto/iota-ninja3-doccords-frontend/src/context/AuthContext.js"],"names":["React","useContext","useState","useEffect","PropTypes","auth","AuthContext","createContext","useAuth","fetchToken","currentUser","getIdToken","AuthProvider","children","setCurrentUser","loading","setLoading","logout","signOut","unsubscribe","onAuthStateChanged","user","console","log","value","propTypes","node","isRequired"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,IAAT,QAAqB,eAArB;;AAEA,MAAMC,WAAW,gBAAGN,KAAK,CAACO,aAAN,EAApB;;AAEA,SAASC,OAAT,GAAmB;AAAA;;AACjB,SAAOP,UAAU,CAACK,WAAD,CAAjB;AACD;;GAFQE,O;;AAGT,OAAO,MAAMC,UAAU,GAAG,MAAM;AAC9B,SAAOJ,IAAI,CAACK,WAAL,CAAiBC,UAAjB,CAA4B,IAA5B,CAAP;AACD,CAFM;AAGP,OAAO,SAASC,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAoC;AAAA;;AACzC,QAAM,CAACH,WAAD,EAAcI,cAAd,IAAgCZ,QAAQ,EAA9C;AACA,QAAM,CAACa,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,IAAD,CAAtC,CAFyC,CAIzC;AACA;AACA;AAEA;AACA;AACA;;AAEA,QAAMe,MAAM,GAAG,MAAM;AACnB,WAAOZ,IAAI,CAACa,OAAL,EAAP;AACD,GAFD,CAZyC,CAgBzC;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;AAEAf,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgB,WAAW,GAAGd,IAAI,CAACe,kBAAL,CAAyBC,IAAD,IAAU;AACpDC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAP,MAAAA,cAAc,CAACO,IAAD,CAAd;AACAL,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAJmB,CAApB;AAMA,WAAOG,WAAP;AACD,GARQ,EAQN,EARM,CAAT;AAUA,QAAMK,KAAK,GAAG;AACZd,IAAAA,WADY;AAEZ;AACA;AACAO,IAAAA,MAJY;AAKZR,IAAAA,UALY,CAMZ;AACA;AACA;;AARY,GAAd;AAWA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEe,KAA7B;AAAA,cACG,CAACT,OAAD,IAAYF;AADf;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;IAtDeD,Y;;KAAAA,Y;AAwDhBA,YAAY,CAACa,SAAb,GAAyB;AAAEZ,EAAAA,QAAQ,EAAET,SAAS,CAACsB,IAAV,CAAeC;AAA3B,CAAzB","sourcesContent":["import React, { useContext, useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { auth } from \"firebaseSetup\";\n\nconst AuthContext = React.createContext();\n\nfunction useAuth() {\n  return useContext(AuthContext);\n}\nexport const fetchToken = () => {\n  return auth.currentUser.getIdToken(true);\n};\nexport function AuthProvider({ children }) {\n  const [currentUser, setCurrentUser] = useState();\n  const [loading, setLoading] = useState(true);\n\n  // function signup(email, password) {\n  //   return auth.createUserWithEmailAndPassword(email, password);\n  // }\n\n  // function login(email, password) {\n  //   return auth.signInWithEmailAndPassword(email, password);\n  // }\n\n  const logout = () => {\n    return auth.signOut();\n  };\n\n  // function resetPassword(email) {\n  //   return auth.sendPasswordResetEmail(email);\n  // }\n\n  // function updateEmail(email) {\n  //   return currentUser.updateEmail(email);\n  // }\n\n  // function updatePassword(password) {\n  //   return currentUser.updatePassword(password);\n  // }\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((user) => {\n      console.log(user);\n      setCurrentUser(user);\n      setLoading(false);\n    });\n\n    return unsubscribe;\n  }, []);\n\n  const value = {\n    currentUser,\n    // login,\n    // signup,\n    logout,\n    fetchToken,\n    // resetPassword,\n    // updateEmail,\n    // updatePassword,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n}\n\nAuthProvider.propTypes = { children: PropTypes.node.isRequired };\n"]},"metadata":{},"sourceType":"module"}