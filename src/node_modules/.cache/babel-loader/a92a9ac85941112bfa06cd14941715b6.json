{"ast":null,"code":"var _jsxFileName = \"/Users/elango/Documents/pesto/iota-ninja3-doccords-frontend/src/components/verticalGridList/index.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport GridList from \"@material-ui/core/GridList\";\nimport GridListTile from \"@material-ui/core/GridListTile\";\nimport GridListTileBar from \"@material-ui/core/GridListTileBar\"; // import ListSubheader from \"@material-ui/core/ListSubheader\";\n// import IconButton from \"@material-ui/core/IconButton\";\n// import InfoIcon from \"@material-ui/icons/Info\";\n// import tileData from './tileData';\n\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\"; // import { useHistory } from \"react-router-dom\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: \"space-around\",\n    overflow: \"hidden\",\n    backgroundColor: theme.palette.background.paper\n  },\n  gridList: {\n    width: \"90%\",\n    height: \"100vh\"\n  },\n  icon: {\n    color: \"rgba(255, 255, 255, 0.54)\"\n  }\n}));\n/**\n * The example data is structured as follows:\n *\n * import image from 'path/to/image.jpg';\n * [etc...]\n *\n * const tileData = [\n *   {\n *     img: image,\n *     title: 'Image',\n *     author: 'author',\n *   },\n *   {\n *     [etc...]\n *   },\n * ];\n */\n// eslint-disable-next-line react/prop-types\n\nconst VerticalGridList = ({\n  healthTopics,\n  handleClick\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const theme = useTheme();\n  const matches = useMediaQuery(theme.breakpoints.down(\"sm\")); // const history = useHistory();\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: /*#__PURE__*/_jsxDEV(GridList, {\n      cellHeight: 180,\n      className: classes.gridList,\n      cols: matches ? 1 : 3,\n      children: healthTopics.map(topic => /*#__PURE__*/_jsxDEV(GridListTile, {\n        onClick: () => handleClick(topic) // history.push({\n        //   pathname: `/healthTopic/${topic.healthTopicId}`,\n        //   state: topic,\n        // })\n        ,\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: topic.picture,\n          alt: topic.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(GridListTileBar, {\n          title: topic.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this)]\n      }, topic.healthTopicId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n_s(VerticalGridList, \"UPWBnPS5gvL9MbuO6krlR+BMfOo=\", false, function () {\n  return [useStyles, useTheme, useMediaQuery];\n});\n\n_c = VerticalGridList;\nexport default VerticalGridList;\n\nvar _c;\n\n$RefreshReg$(_c, \"VerticalGridList\");","map":{"version":3,"sources":["/Users/elango/Documents/pesto/iota-ninja3-doccords-frontend/src/components/verticalGridList/index.js"],"names":["React","makeStyles","useTheme","GridList","GridListTile","GridListTileBar","useMediaQuery","useStyles","theme","root","display","flexWrap","justifyContent","overflow","backgroundColor","palette","background","paper","gridList","width","height","icon","color","VerticalGridList","healthTopics","handleClick","classes","matches","breakpoints","down","map","topic","picture","title","healthTopicId"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,0BAArC;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,eAAP,MAA4B,mCAA5B,C,CACA;AACA;AACA;AACA;;AAEA,OAAOC,aAAP,MAA0B,iCAA1B,C,CACA;;;AAEA,MAAMC,SAAS,GAAGN,UAAU,CAAEO,KAAD,KAAY;AACvCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,OAAO,EAAE,MADL;AAEJC,IAAAA,QAAQ,EAAE,MAFN;AAGJC,IAAAA,cAAc,EAAE,cAHZ;AAIJC,IAAAA,QAAQ,EAAE,QAJN;AAKJC,IAAAA,eAAe,EAAEN,KAAK,CAACO,OAAN,CAAcC,UAAd,CAAyBC;AALtC,GADiC;AAQvCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAE,KADC;AAERC,IAAAA,MAAM,EAAE;AAFA,GAR6B;AAYvCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAE;AADH;AAZiC,CAAZ,CAAD,CAA5B;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA,YAAF;AAAgBC,EAAAA;AAAhB,CAAD,KAAmC;AAAA;;AAC1D,QAAMC,OAAO,GAAGnB,SAAS,EAAzB;AACA,QAAMC,KAAK,GAAGN,QAAQ,EAAtB;AACA,QAAMyB,OAAO,GAAGrB,aAAa,CAACE,KAAK,CAACoB,WAAN,CAAkBC,IAAlB,CAAuB,IAAvB,CAAD,CAA7B,CAH0D,CAI1D;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAEH,OAAO,CAACjB,IAAxB;AAAA,2BACE,QAAC,QAAD;AACE,MAAA,UAAU,EAAE,GADd;AAEE,MAAA,SAAS,EAAEiB,OAAO,CAACR,QAFrB;AAGE,MAAA,IAAI,EAAES,OAAO,GAAG,CAAH,GAAO,CAHtB;AAAA,gBAMGH,YAAY,CAACM,GAAb,CAAkBC,KAAD,iBAChB,QAAC,YAAD;AAEE,QAAA,OAAO,EACL,MAAMN,WAAW,CAACM,KAAD,CADZ,CAEL;AACA;AACA;AACA;AAPJ;AAAA,gCAUE;AAAK,UAAA,GAAG,EAAEA,KAAK,CAACC,OAAhB;AAAyB,UAAA,GAAG,EAAED,KAAK,CAACE;AAApC;AAAA;AAAA;AAAA;AAAA,gBAVF,eAWE,QAAC,eAAD;AAAiB,UAAA,KAAK,EAAEF,KAAK,CAACE;AAA9B;AAAA;AAAA;AAAA;AAAA,gBAXF;AAAA,SACOF,KAAK,CAACG,aADb;AAAA;AAAA;AAAA;AAAA,cADD;AANH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA0BD,CAhCD;;GAAMX,gB;UACYhB,S,EACFL,Q,EACEI,a;;;KAHZiB,gB;AAkCN,eAAeA,gBAAf","sourcesContent":["import React from \"react\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport GridList from \"@material-ui/core/GridList\";\nimport GridListTile from \"@material-ui/core/GridListTile\";\nimport GridListTileBar from \"@material-ui/core/GridListTileBar\";\n// import ListSubheader from \"@material-ui/core/ListSubheader\";\n// import IconButton from \"@material-ui/core/IconButton\";\n// import InfoIcon from \"@material-ui/icons/Info\";\n// import tileData from './tileData';\n\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\n// import { useHistory } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: \"space-around\",\n    overflow: \"hidden\",\n    backgroundColor: theme.palette.background.paper,\n  },\n  gridList: {\n    width: \"90%\",\n    height: \"100vh\",\n  },\n  icon: {\n    color: \"rgba(255, 255, 255, 0.54)\",\n  },\n}));\n\n/**\n * The example data is structured as follows:\n *\n * import image from 'path/to/image.jpg';\n * [etc...]\n *\n * const tileData = [\n *   {\n *     img: image,\n *     title: 'Image',\n *     author: 'author',\n *   },\n *   {\n *     [etc...]\n *   },\n * ];\n */\n\n// eslint-disable-next-line react/prop-types\nconst VerticalGridList = ({ healthTopics, handleClick }) => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const matches = useMediaQuery(theme.breakpoints.down(\"sm\"));\n  // const history = useHistory();\n\n  return (\n    <div className={classes.root}>\n      <GridList\n        cellHeight={180}\n        className={classes.gridList}\n        cols={matches ? 1 : 3}\n      >\n        {/* eslint-disable-next-line react/prop-types */}\n        {healthTopics.map((topic) => (\n          <GridListTile\n            key={topic.healthTopicId}\n            onClick={\n              () => handleClick(topic)\n              // history.push({\n              //   pathname: `/healthTopic/${topic.healthTopicId}`,\n              //   state: topic,\n              // })\n            }\n          >\n            <img src={topic.picture} alt={topic.title} />\n            <GridListTileBar title={topic.title} />\n          </GridListTile>\n        ))}\n      </GridList>\n    </div>\n  );\n};\n\nexport default VerticalGridList;\n"]},"metadata":{},"sourceType":"module"}