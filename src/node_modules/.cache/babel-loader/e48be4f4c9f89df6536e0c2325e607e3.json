{"ast":null,"code":"var _jsxFileName = \"/Users/elango/Documents/pesto/iota-ninja3-doccords-frontend/src/pages/users/profiles/createProfile.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable no-unused-vars */\nimport React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect, useSelector } from \"react-redux\";\nimport { Paper, makeStyles, Grid, Typography } from \"@material-ui/core\";\nimport Controls from \"../../../components/Form/controls/Controls\";\nimport { useForm, Form } from \"../../../components/Form/useForm\";\nimport UploadFile from \"components/shared/upload/uploadFile\";\nimport { fetchAllHealthTopics } from \"apiRequests/common\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport { createNewProfile } from \"apiRequests/user\";\nimport { useHistory } from \"react-router-dom\";\nimport UploadAvatar from \"components/shared/upload/uploadAvatar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst genderItems = [{\n  id: \"male\",\n  title: \"Male\"\n}, {\n  id: \"female\",\n  title: \"Female\"\n}, {\n  id: \"other\",\n  title: \"Other\"\n}];\nconst healthIssuesList = [{\n  id: 1,\n  name: \"Cancer\",\n  status: false\n}, {\n  id: 2,\n  name: \"Diabetes\",\n  status: false\n}, {\n  id: 3,\n  name: \"Blood pressure\",\n  status: false\n}, {\n  id: 4,\n  name: \"Covid\",\n  status: true\n}];\n\nconst getRelationshipCollection = () => [{\n  id: 1,\n  title: \"Self\"\n}, {\n  id: 2,\n  title: \"Spouse\"\n}, {\n  id: 3,\n  title: \"Father\"\n}, {\n  id: 4,\n  title: \"Mother\"\n}, {\n  id: 5,\n  title: \"Brother\"\n}, {\n  id: 6,\n  title: \"Sister\"\n}, {\n  id: 7,\n  title: \"Child\"\n}, {\n  id: 8,\n  title: \"Others\"\n}];\n\nconst initialFValues = {\n  id: 0,\n  profileName: \"\",\n  email: \"\",\n  mobile: \"\",\n  age: \"\",\n  gender: \"male\",\n  relationship: 1,\n  // creationDate: new Date(),\n  cancer: false,\n  bloodPressure: false,\n  sugar: false,\n  covid: false\n};\nconst useStyles = makeStyles(theme => ({\n  pageContent: {\n    marginTop: \"3rem\",\n    margin: theme.spacing(3),\n    padding: theme.spacing(3)\n  }\n}));\n\nconst CreateProfile = ({\n  fetchAllHealthTopics,\n  healthTopics,\n  createNewProfile\n}) => {\n  _s();\n\n  const [documentData, setDocumentData] = useState({\n    name: \"\",\n    healthTopicId: \"\",\n    link: \"\"\n  });\n  const [healthTopicId, setHealthTopicId] = useState({});\n  const [profileName, setProfileName] = useState(\"\");\n  const [relationshipId, setRelationshipId] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n  const [age, setAge] = useState(\"\");\n  const [gender, setGender] = useState(\"\");\n  const [healthIssues, setHealthIssues] = useState(healthIssuesList);\n  const [errors, setErrors] = useState({});\n  const uploadedLink = useSelector(state => state.common.uploadedLink);\n  const classes = useStyles();\n  const history = useHistory();\n\n  const generateHealthTopics = () => {\n    const healthTopicsArr = healthTopics.map(topic => ({\n      id: topic.healthTopicId,\n      title: topic.title\n    }));\n    return healthTopicsArr;\n  };\n\n  useEffect(() => {\n    fetchAllHealthTopics();\n    setGender(genderItems[0].id);\n    setRelationshipId(getRelationshipCollection()[0].id);\n  }, []);\n  useEffect(() => {\n    if (healthTopics.length > 0) {\n      setHealthTopicId(healthTopics[0].healthTopicId);\n    }\n  }, [healthTopics]);\n  useEffect(() => {\n    setDocumentData({ ...documentData,\n      link: uploadedLink\n    });\n  }, [uploadedLink]);\n\n  const onSubmit = () => {\n    createNewProfile({\n      document: documentData,\n      relationshipId,\n      profileName,\n      age,\n      email,\n      phone,\n      gender,\n      healthIssues\n    }, history);\n  };\n\n  const handleInputChange = e => {\n    if (e.target.name === \"document\") {\n      setDocumentData({ ...documentData,\n        name: e.target.value\n      });\n    }\n\n    if (e.target.name === \"topic\") {\n      setHealthTopicId(e.target.value);\n      setDocumentData({ ...documentData,\n        healthTopicId: e.target.value\n      });\n    }\n\n    if (e.target.name === \"relationship\") {\n      setRelationshipId(e.target.value);\n    }\n\n    if (e.target.name === \"profileName\") {\n      setProfileName(e.target.value);\n    }\n\n    if (e.target.name === \"email\") {\n      setEmail(e.target.value);\n    }\n\n    if (e.target.name === \"phone\") {\n      setPhone(e.target.value);\n    }\n\n    if (e.target.name === \"age\") {\n      setAge(e.target.value);\n    }\n\n    if (e.target.name === \"gender\") {\n      setGender(e.target.value);\n    }\n  };\n\n  const handleCheckbox = (e, issue) => {\n    let changedArray = [];\n\n    if (e.target.name === \"healthIssues\") {\n      changedArray = healthIssues.map(issueSingle => {\n        if (issue.id === issueSingle.id) {\n          issueSingle.status = e.target.checked;\n        }\n\n        return issueSingle;\n      });\n    }\n\n    setHealthIssues(changedArray);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Paper, {\n      className: classes.pageContent,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 12,\n          lg: 12,\n          xl: 12,\n          children: [/*#__PURE__*/_jsxDEV(UploadAvatar, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 13\n          }, this), \"s\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      className: classes.pageContent,\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 6,\n            children: [/*#__PURE__*/_jsxDEV(Controls.Input, {\n              name: \"profileName\",\n              label: \"Profile name *\",\n              value: profileName,\n              onChange: handleInputChange,\n              error: errors.profileName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Controls.Select, {\n              name: \"relationship\",\n              label: \"Relationship\",\n              value: relationshipId,\n              onChange: handleInputChange,\n              options: getRelationshipCollection(),\n              error: errors.relationship\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Controls.Input, {\n              label: \"Email\",\n              name: \"email\",\n              value: email,\n              onChange: handleInputChange,\n              error: errors.email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Controls.Input, {\n              label: \"Phone\",\n              name: \"phone\",\n              value: phone,\n              onChange: handleInputChange,\n              error: errors.phone\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Controls.Input, {\n              name: \"age\",\n              label: \"Age\",\n              value: age,\n              onChange: handleInputChange,\n              error: errors.age\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 6,\n            children: [/*#__PURE__*/_jsxDEV(Controls.RadioGroup, {\n              name: \"gender\",\n              label: \"Gender\",\n              value: gender,\n              onChange: handleInputChange,\n              items: genderItems\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n              column: true,\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle1\",\n                children: \"Any other health issue\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 232,\n                columnNumber: 17\n              }, this), healthIssues.map(issue => /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                  checked: issue.status,\n                  onChange: e => {\n                    handleCheckbox(e, issue);\n                  },\n                  name: \"healthIssues\",\n                  color: \"primary\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 239,\n                  columnNumber: 23\n                }, this),\n                label: issue.name\n              }, issue.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 236,\n                columnNumber: 19\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Controls.Button, {\n              style: {\n                display: \"block\",\n                margin: \"0 auto\"\n              },\n              onClick: onSubmit,\n              text: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(CreateProfile, \"wVb2FxfoYYwfJ55wsfN9ocnbLIU=\", false, function () {\n  return [useSelector, useStyles, useHistory];\n});\n\n_c = CreateProfile;\nCreateProfile.propTypes = {\n  fetchAllHealthTopics: PropTypes.func,\n  createNewProfile: PropTypes.func,\n  healthTopics: PropTypes.array\n};\n\nconst mapStateToProps = state => ({\n  healthTopics: state.common.healthTopics\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchAllHealthTopics: () => dispatch(fetchAllHealthTopics()),\n  createNewProfile: (data, history) => dispatch(createNewProfile(data, history))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateProfile); // eslint-disable-next-line no-lone-blocks\n\n{\n  /* <Grid item xs={12} md={6}>\n              <Controls.RadioGroup\n                name=\"gender\"\n                label=\"Gender\"\n                value={gender}\n                onChange={handleInputChange}\n                items={genderItems}\n              />\n              <Typography variant=\"subtitle1\">Any Health Issues</Typography>\n              <Grid>\n                <Grid item xs={6} sm={3} md={6} lg={6} xl={6}>\n                  {healthIssues.length > 0 &&\n                    healthIssues.map((issue) => (\n                      <Controls.Checkbox\n                        key={issue.id}\n                        name=\"healthIssues\"\n                        label={issue.name}\n                        value={issue.status}\n                        onChange={(e, issue) => {\n                          console.log(issue);\n                          handleCheckbox(e, issue);\n                        }}\n                      />\n                    ))}\n                </Grid>\n              </Grid>\n               <div>\n                <Controls.Button type=\"submit\" text=\"Submit\" />\n              </div>\n            </Grid> */\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateProfile\");","map":{"version":3,"sources":["/Users/elango/Documents/pesto/iota-ninja3-doccords-frontend/src/pages/users/profiles/createProfile.js"],"names":["React","useEffect","useState","PropTypes","connect","useSelector","Paper","makeStyles","Grid","Typography","Controls","useForm","Form","UploadFile","fetchAllHealthTopics","FormControlLabel","Checkbox","FormGroup","createNewProfile","useHistory","UploadAvatar","genderItems","id","title","healthIssuesList","name","status","getRelationshipCollection","initialFValues","profileName","email","mobile","age","gender","relationship","cancer","bloodPressure","sugar","covid","useStyles","theme","pageContent","marginTop","margin","spacing","padding","CreateProfile","healthTopics","documentData","setDocumentData","healthTopicId","link","setHealthTopicId","setProfileName","relationshipId","setRelationshipId","setEmail","phone","setPhone","setAge","setGender","healthIssues","setHealthIssues","errors","setErrors","uploadedLink","state","common","classes","history","generateHealthTopics","healthTopicsArr","map","topic","length","onSubmit","document","handleInputChange","e","target","value","handleCheckbox","issue","changedArray","issueSingle","checked","display","propTypes","func","array","mapStateToProps","mapDispatchToProps","dispatch","data"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,aAArC;AACA,SAASC,KAAT,EAAgBC,UAAhB,EAA4BC,IAA5B,EAAkCC,UAAlC,QAAoD,mBAApD;AACA,OAAOC,QAAP,MAAqB,4CAArB;AACA,SAASC,OAAT,EAAkBC,IAAlB,QAA8B,kCAA9B;AACA,OAAOC,UAAP,MAAuB,qCAAvB;AACA,SAASC,oBAAT,QAAqC,oBAArC;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,SAASC,gBAAT,QAAiC,kBAAjC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,uCAAzB;;;AAEA,MAAMC,WAAW,GAAG,CAClB;AAAEC,EAAAA,EAAE,EAAE,MAAN;AAAcC,EAAAA,KAAK,EAAE;AAArB,CADkB,EAElB;AAAED,EAAAA,EAAE,EAAE,QAAN;AAAgBC,EAAAA,KAAK,EAAE;AAAvB,CAFkB,EAGlB;AAAED,EAAAA,EAAE,EAAE,OAAN;AAAeC,EAAAA,KAAK,EAAE;AAAtB,CAHkB,CAApB;AAKA,MAAMC,gBAAgB,GAAG,CACvB;AAAEF,EAAAA,EAAE,EAAE,CAAN;AAASG,EAAAA,IAAI,EAAE,QAAf;AAAyBC,EAAAA,MAAM,EAAE;AAAjC,CADuB,EAEvB;AAAEJ,EAAAA,EAAE,EAAE,CAAN;AAASG,EAAAA,IAAI,EAAE,UAAf;AAA2BC,EAAAA,MAAM,EAAE;AAAnC,CAFuB,EAGvB;AAAEJ,EAAAA,EAAE,EAAE,CAAN;AAASG,EAAAA,IAAI,EAAE,gBAAf;AAAiCC,EAAAA,MAAM,EAAE;AAAzC,CAHuB,EAIvB;AAAEJ,EAAAA,EAAE,EAAE,CAAN;AAASG,EAAAA,IAAI,EAAE,OAAf;AAAwBC,EAAAA,MAAM,EAAE;AAAhC,CAJuB,CAAzB;;AAOA,MAAMC,yBAAyB,GAAG,MAAM,CACtC;AAAEL,EAAAA,EAAE,EAAE,CAAN;AAASC,EAAAA,KAAK,EAAE;AAAhB,CADsC,EAEtC;AAAED,EAAAA,EAAE,EAAE,CAAN;AAASC,EAAAA,KAAK,EAAE;AAAhB,CAFsC,EAGtC;AAAED,EAAAA,EAAE,EAAE,CAAN;AAASC,EAAAA,KAAK,EAAE;AAAhB,CAHsC,EAItC;AAAED,EAAAA,EAAE,EAAE,CAAN;AAASC,EAAAA,KAAK,EAAE;AAAhB,CAJsC,EAKtC;AAAED,EAAAA,EAAE,EAAE,CAAN;AAASC,EAAAA,KAAK,EAAE;AAAhB,CALsC,EAMtC;AAAED,EAAAA,EAAE,EAAE,CAAN;AAASC,EAAAA,KAAK,EAAE;AAAhB,CANsC,EAOtC;AAAED,EAAAA,EAAE,EAAE,CAAN;AAASC,EAAAA,KAAK,EAAE;AAAhB,CAPsC,EAQtC;AAAED,EAAAA,EAAE,EAAE,CAAN;AAASC,EAAAA,KAAK,EAAE;AAAhB,CARsC,CAAxC;;AAWA,MAAMK,cAAc,GAAG;AACrBN,EAAAA,EAAE,EAAE,CADiB;AAErBO,EAAAA,WAAW,EAAE,EAFQ;AAGrBC,EAAAA,KAAK,EAAE,EAHc;AAIrBC,EAAAA,MAAM,EAAE,EAJa;AAKrBC,EAAAA,GAAG,EAAE,EALgB;AAMrBC,EAAAA,MAAM,EAAE,MANa;AAOrBC,EAAAA,YAAY,EAAE,CAPO;AAQrB;AACAC,EAAAA,MAAM,EAAE,KATa;AAUrBC,EAAAA,aAAa,EAAE,KAVM;AAWrBC,EAAAA,KAAK,EAAE,KAXc;AAYrBC,EAAAA,KAAK,EAAE;AAZc,CAAvB;AAeA,MAAMC,SAAS,GAAGhC,UAAU,CAAEiC,KAAD,KAAY;AACvCC,EAAAA,WAAW,EAAE;AACXC,IAAAA,SAAS,EAAE,MADA;AAEXC,IAAAA,MAAM,EAAEH,KAAK,CAACI,OAAN,CAAc,CAAd,CAFG;AAGXC,IAAAA,OAAO,EAAEL,KAAK,CAACI,OAAN,CAAc,CAAd;AAHE;AAD0B,CAAZ,CAAD,CAA5B;;AAQA,MAAME,aAAa,GAAG,CAAC;AACrBhC,EAAAA,oBADqB;AAErBiC,EAAAA,YAFqB;AAGrB7B,EAAAA;AAHqB,CAAD,KAIhB;AAAA;;AACJ,QAAM,CAAC8B,YAAD,EAAeC,eAAf,IAAkC/C,QAAQ,CAAC;AAC/CuB,IAAAA,IAAI,EAAE,EADyC;AAE/CyB,IAAAA,aAAa,EAAE,EAFgC;AAG/CC,IAAAA,IAAI,EAAE;AAHyC,GAAD,CAAhD;AAKA,QAAM,CAACD,aAAD,EAAgBE,gBAAhB,IAAoClD,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAAC2B,WAAD,EAAcwB,cAAd,IAAgCnD,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACoD,cAAD,EAAiBC,iBAAjB,IAAsCrD,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAAC4B,KAAD,EAAQ0B,QAAR,IAAoBtD,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACuD,KAAD,EAAQC,QAAR,IAAoBxD,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAAC8B,GAAD,EAAM2B,MAAN,IAAgBzD,QAAQ,CAAC,EAAD,CAA9B;AACA,QAAM,CAAC+B,MAAD,EAAS2B,SAAT,IAAsB1D,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAAC2D,YAAD,EAAeC,eAAf,IAAkC5D,QAAQ,CAACsB,gBAAD,CAAhD;AACA,QAAM,CAACuC,MAAD,EAASC,SAAT,IAAsB9D,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM+D,YAAY,GAAG5D,WAAW,CAAE6D,KAAD,IAAWA,KAAK,CAACC,MAAN,CAAaF,YAAzB,CAAhC;AACA,QAAMG,OAAO,GAAG7B,SAAS,EAAzB;AACA,QAAM8B,OAAO,GAAGlD,UAAU,EAA1B;;AAEA,QAAMmD,oBAAoB,GAAG,MAAM;AACjC,UAAMC,eAAe,GAAGxB,YAAY,CAACyB,GAAb,CAAkBC,KAAD,KAAY;AACnDnD,MAAAA,EAAE,EAAEmD,KAAK,CAACvB,aADyC;AAEnD3B,MAAAA,KAAK,EAAEkD,KAAK,CAAClD;AAFsC,KAAZ,CAAjB,CAAxB;AAIA,WAAOgD,eAAP;AACD,GAND;;AAOAtE,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,oBAAoB;AACpB8C,IAAAA,SAAS,CAACvC,WAAW,CAAC,CAAD,CAAX,CAAeC,EAAhB,CAAT;AACAiC,IAAAA,iBAAiB,CAAC5B,yBAAyB,GAAG,CAAH,CAAzB,CAA+BL,EAAhC,CAAjB;AACD,GAJQ,EAIN,EAJM,CAAT;AAKArB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI8C,YAAY,CAAC2B,MAAb,GAAsB,CAA1B,EAA6B;AAC3BtB,MAAAA,gBAAgB,CAACL,YAAY,CAAC,CAAD,CAAZ,CAAgBG,aAAjB,CAAhB;AACD;AACF,GAJQ,EAIN,CAACH,YAAD,CAJM,CAAT;AAMA9C,EAAAA,SAAS,CAAC,MAAM;AACdgD,IAAAA,eAAe,CAAC,EACd,GAAGD,YADW;AAEdG,MAAAA,IAAI,EAAEc;AAFQ,KAAD,CAAf;AAID,GALQ,EAKN,CAACA,YAAD,CALM,CAAT;;AAMA,QAAMU,QAAQ,GAAG,MAAM;AACrBzD,IAAAA,gBAAgB,CACd;AACE0D,MAAAA,QAAQ,EAAE5B,YADZ;AAEEM,MAAAA,cAFF;AAGEzB,MAAAA,WAHF;AAIEG,MAAAA,GAJF;AAKEF,MAAAA,KALF;AAME2B,MAAAA,KANF;AAOExB,MAAAA,MAPF;AAQE4B,MAAAA;AARF,KADc,EAWdQ,OAXc,CAAhB;AAaD,GAdD;;AAgBA,QAAMQ,iBAAiB,GAAIC,CAAD,IAAO;AAC/B,QAAIA,CAAC,CAACC,MAAF,CAAStD,IAAT,KAAkB,UAAtB,EAAkC;AAChCwB,MAAAA,eAAe,CAAC,EACd,GAAGD,YADW;AAEdvB,QAAAA,IAAI,EAAEqD,CAAC,CAACC,MAAF,CAASC;AAFD,OAAD,CAAf;AAID;;AACD,QAAIF,CAAC,CAACC,MAAF,CAAStD,IAAT,KAAkB,OAAtB,EAA+B;AAC7B2B,MAAAA,gBAAgB,CAAC0B,CAAC,CAACC,MAAF,CAASC,KAAV,CAAhB;AACA/B,MAAAA,eAAe,CAAC,EACd,GAAGD,YADW;AAEdE,QAAAA,aAAa,EAAE4B,CAAC,CAACC,MAAF,CAASC;AAFV,OAAD,CAAf;AAID;;AACD,QAAIF,CAAC,CAACC,MAAF,CAAStD,IAAT,KAAkB,cAAtB,EAAsC;AACpC8B,MAAAA,iBAAiB,CAACuB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAjB;AACD;;AACD,QAAIF,CAAC,CAACC,MAAF,CAAStD,IAAT,KAAkB,aAAtB,EAAqC;AACnC4B,MAAAA,cAAc,CAACyB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAd;AACD;;AACD,QAAIF,CAAC,CAACC,MAAF,CAAStD,IAAT,KAAkB,OAAtB,EAA+B;AAC7B+B,MAAAA,QAAQ,CAACsB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAR;AACD;;AACD,QAAIF,CAAC,CAACC,MAAF,CAAStD,IAAT,KAAkB,OAAtB,EAA+B;AAC7BiC,MAAAA,QAAQ,CAACoB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAR;AACD;;AACD,QAAIF,CAAC,CAACC,MAAF,CAAStD,IAAT,KAAkB,KAAtB,EAA6B;AAC3BkC,MAAAA,MAAM,CAACmB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAN;AACD;;AACD,QAAIF,CAAC,CAACC,MAAF,CAAStD,IAAT,KAAkB,QAAtB,EAAgC;AAC9BmC,MAAAA,SAAS,CAACkB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAT;AACD;AACF,GAhCD;;AAiCA,QAAMC,cAAc,GAAG,CAACH,CAAD,EAAII,KAAJ,KAAc;AACnC,QAAIC,YAAY,GAAG,EAAnB;;AACA,QAAIL,CAAC,CAACC,MAAF,CAAStD,IAAT,KAAkB,cAAtB,EAAsC;AACpC0D,MAAAA,YAAY,GAAGtB,YAAY,CAACW,GAAb,CAAkBY,WAAD,IAAiB;AAC/C,YAAIF,KAAK,CAAC5D,EAAN,KAAa8D,WAAW,CAAC9D,EAA7B,EAAiC;AAC/B8D,UAAAA,WAAW,CAAC1D,MAAZ,GAAqBoD,CAAC,CAACC,MAAF,CAASM,OAA9B;AACD;;AACD,eAAOD,WAAP;AACD,OALc,CAAf;AAMD;;AACDtB,IAAAA,eAAe,CAACqB,YAAD,CAAf;AACD,GAXD;;AAaA,sBACE;AAAA,4BACE,QAAC,KAAD;AAAO,MAAA,SAAS,EAAEf,OAAO,CAAC3B,WAA1B;AAAA,6BACE,QAAC,IAAD;AAAM,QAAA,SAAS,MAAf;AAAA,+BACE,QAAC,IAAD;AAAM,UAAA,IAAI,MAAV;AAAW,UAAA,EAAE,EAAE,EAAf;AAAmB,UAAA,EAAE,EAAE,EAAvB;AAA2B,UAAA,EAAE,EAAE,EAA/B;AAAmC,UAAA,EAAE,EAAE,EAAvC;AAAA,kCACE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,kBADF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eASE,QAAC,KAAD;AAAO,MAAA,SAAS,EAAE2B,OAAO,CAAC3B,WAA1B;AAAA,6BACE,QAAC,IAAD;AAAA,+BACE,QAAC,IAAD;AAAM,UAAA,SAAS,MAAf;AAAA,kCACE,QAAC,IAAD;AAAM,YAAA,IAAI,MAAV;AAAW,YAAA,EAAE,EAAE,EAAf;AAAmB,YAAA,EAAE,EAAE,CAAvB;AAAA,oCACE,QAAC,QAAD,CAAU,KAAV;AACE,cAAA,IAAI,EAAC,aADP;AAEE,cAAA,KAAK,EAAC,gBAFR;AAGE,cAAA,KAAK,EAAEZ,WAHT;AAIE,cAAA,QAAQ,EAAEgD,iBAJZ;AAKE,cAAA,KAAK,EAAEd,MAAM,CAAClC;AALhB;AAAA;AAAA;AAAA;AAAA,oBADF,eAQE,QAAC,QAAD,CAAU,MAAV;AACE,cAAA,IAAI,EAAC,cADP;AAEE,cAAA,KAAK,EAAC,cAFR;AAGE,cAAA,KAAK,EAAEyB,cAHT;AAIE,cAAA,QAAQ,EAAEuB,iBAJZ;AAKE,cAAA,OAAO,EAAElD,yBAAyB,EALpC;AAME,cAAA,KAAK,EAAEoC,MAAM,CAAC7B;AANhB;AAAA;AAAA;AAAA;AAAA,oBARF,eAgBE,QAAC,QAAD,CAAU,KAAV;AACE,cAAA,KAAK,EAAC,OADR;AAEE,cAAA,IAAI,EAAC,OAFP;AAGE,cAAA,KAAK,EAAEJ,KAHT;AAIE,cAAA,QAAQ,EAAE+C,iBAJZ;AAKE,cAAA,KAAK,EAAEd,MAAM,CAACjC;AALhB;AAAA;AAAA;AAAA;AAAA,oBAhBF,eAuBE,QAAC,QAAD,CAAU,KAAV;AACE,cAAA,KAAK,EAAC,OADR;AAEE,cAAA,IAAI,EAAC,OAFP;AAGE,cAAA,KAAK,EAAE2B,KAHT;AAIE,cAAA,QAAQ,EAAEoB,iBAJZ;AAKE,cAAA,KAAK,EAAEd,MAAM,CAACN;AALhB;AAAA;AAAA;AAAA;AAAA,oBAvBF,eA8BE,QAAC,QAAD,CAAU,KAAV;AACE,cAAA,IAAI,EAAC,KADP;AAEE,cAAA,KAAK,EAAC,KAFR;AAGE,cAAA,KAAK,EAAEzB,GAHT;AAIE,cAAA,QAAQ,EAAE6C,iBAJZ;AAKE,cAAA,KAAK,EAAEd,MAAM,CAAC/B;AALhB;AAAA;AAAA;AAAA;AAAA,oBA9BF;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAuCE,QAAC,IAAD;AAAM,YAAA,IAAI,MAAV;AAAW,YAAA,EAAE,EAAE,EAAf;AAAmB,YAAA,EAAE,EAAE,CAAvB;AAAA,oCACE,QAAC,QAAD,CAAU,UAAV;AACE,cAAA,IAAI,EAAC,QADP;AAEE,cAAA,KAAK,EAAC,QAFR;AAGE,cAAA,KAAK,EAAEC,MAHT;AAIE,cAAA,QAAQ,EAAE4C,iBAJZ;AAKE,cAAA,KAAK,EAAExD;AALT;AAAA;AAAA;AAAA;AAAA,oBADF,eAQE,QAAC,SAAD;AAAW,cAAA,MAAM,MAAjB;AAAA,sCACE,QAAC,UAAD;AAAY,gBAAA,OAAO,EAAC,WAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAIGwC,YAAY,CAACW,GAAb,CAAkBU,KAAD,iBAChB,QAAC,gBAAD;AAEE,gBAAA,OAAO,eACL,QAAC,QAAD;AACE,kBAAA,OAAO,EAAEA,KAAK,CAACxD,MADjB;AAEE,kBAAA,QAAQ,EAAGoD,CAAD,IAAO;AACfG,oBAAAA,cAAc,CAACH,CAAD,EAAII,KAAJ,CAAd;AACD,mBAJH;AAKE,kBAAA,IAAI,EAAC,cALP;AAME,kBAAA,KAAK,EAAC;AANR;AAAA;AAAA;AAAA;AAAA,wBAHJ;AAYE,gBAAA,KAAK,EAAEA,KAAK,CAACzD;AAZf,iBACOyD,KAAK,CAAC5D,EADb;AAAA;AAAA;AAAA;AAAA,sBADD,CAJH;AAAA;AAAA;AAAA;AAAA;AAAA,oBARF,eA8BE,QAAC,QAAD,CAAU,MAAV;AACE,cAAA,KAAK,EAAE;AAAEgE,gBAAAA,OAAO,EAAE,OAAX;AAAoB3C,gBAAAA,MAAM,EAAE;AAA5B,eADT;AAEE,cAAA,OAAO,EAAEgC,QAFX;AAGE,cAAA,IAAI,EAAC;AAHP;AAAA;AAAA;AAAA;AAAA,oBA9BF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAvCF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YATF;AAAA,kBADF;AA4FD,CAzMD;;GAAM7B,a;UAmBiBzC,W,EACLkC,S,EACApB,U;;;KArBZ2B,a;AA2MNA,aAAa,CAACyC,SAAd,GAA0B;AACxBzE,EAAAA,oBAAoB,EAAEX,SAAS,CAACqF,IADR;AAExBtE,EAAAA,gBAAgB,EAAEf,SAAS,CAACqF,IAFJ;AAGxBzC,EAAAA,YAAY,EAAE5C,SAAS,CAACsF;AAHA,CAA1B;;AAMA,MAAMC,eAAe,GAAIxB,KAAD,KAAY;AAClCnB,EAAAA,YAAY,EAAEmB,KAAK,CAACC,MAAN,CAAapB;AADO,CAAZ,CAAxB;;AAGA,MAAM4C,kBAAkB,GAAIC,QAAD,KAAe;AACxC9E,EAAAA,oBAAoB,EAAE,MAAM8E,QAAQ,CAAC9E,oBAAoB,EAArB,CADI;AAExCI,EAAAA,gBAAgB,EAAE,CAAC2E,IAAD,EAAOxB,OAAP,KAChBuB,QAAQ,CAAC1E,gBAAgB,CAAC2E,IAAD,EAAOxB,OAAP,CAAjB;AAH8B,CAAf,CAA3B;;AAKA,eAAejE,OAAO,CAACsF,eAAD,EAAkBC,kBAAlB,CAAP,CAA6C7C,aAA7C,CAAf,C,CAEA;;AACA;AACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEC","sourcesContent":["/* eslint-disable no-unused-vars */\nimport React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect, useSelector } from \"react-redux\";\nimport { Paper, makeStyles, Grid, Typography } from \"@material-ui/core\";\nimport Controls from \"../../../components/Form/controls/Controls\";\nimport { useForm, Form } from \"../../../components/Form/useForm\";\nimport UploadFile from \"components/shared/upload/uploadFile\";\nimport { fetchAllHealthTopics } from \"apiRequests/common\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport { createNewProfile } from \"apiRequests/user\";\nimport { useHistory } from \"react-router-dom\";\nimport UploadAvatar from \"components/shared/upload/uploadAvatar\";\n\nconst genderItems = [\n  { id: \"male\", title: \"Male\" },\n  { id: \"female\", title: \"Female\" },\n  { id: \"other\", title: \"Other\" },\n];\nconst healthIssuesList = [\n  { id: 1, name: \"Cancer\", status: false },\n  { id: 2, name: \"Diabetes\", status: false },\n  { id: 3, name: \"Blood pressure\", status: false },\n  { id: 4, name: \"Covid\", status: true },\n];\n\nconst getRelationshipCollection = () => [\n  { id: 1, title: \"Self\" },\n  { id: 2, title: \"Spouse\" },\n  { id: 3, title: \"Father\" },\n  { id: 4, title: \"Mother\" },\n  { id: 5, title: \"Brother\" },\n  { id: 6, title: \"Sister\" },\n  { id: 7, title: \"Child\" },\n  { id: 8, title: \"Others\" },\n];\n\nconst initialFValues = {\n  id: 0,\n  profileName: \"\",\n  email: \"\",\n  mobile: \"\",\n  age: \"\",\n  gender: \"male\",\n  relationship: 1,\n  // creationDate: new Date(),\n  cancer: false,\n  bloodPressure: false,\n  sugar: false,\n  covid: false,\n};\n\nconst useStyles = makeStyles((theme) => ({\n  pageContent: {\n    marginTop: \"3rem\",\n    margin: theme.spacing(3),\n    padding: theme.spacing(3),\n  },\n}));\n\nconst CreateProfile = ({\n  fetchAllHealthTopics,\n  healthTopics,\n  createNewProfile,\n}) => {\n  const [documentData, setDocumentData] = useState({\n    name: \"\",\n    healthTopicId: \"\",\n    link: \"\",\n  });\n  const [healthTopicId, setHealthTopicId] = useState({});\n  const [profileName, setProfileName] = useState(\"\");\n  const [relationshipId, setRelationshipId] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n  const [age, setAge] = useState(\"\");\n  const [gender, setGender] = useState(\"\");\n  const [healthIssues, setHealthIssues] = useState(healthIssuesList);\n  const [errors, setErrors] = useState({});\n  const uploadedLink = useSelector((state) => state.common.uploadedLink);\n  const classes = useStyles();\n  const history = useHistory();\n\n  const generateHealthTopics = () => {\n    const healthTopicsArr = healthTopics.map((topic) => ({\n      id: topic.healthTopicId,\n      title: topic.title,\n    }));\n    return healthTopicsArr;\n  };\n  useEffect(() => {\n    fetchAllHealthTopics();\n    setGender(genderItems[0].id);\n    setRelationshipId(getRelationshipCollection()[0].id);\n  }, []);\n  useEffect(() => {\n    if (healthTopics.length > 0) {\n      setHealthTopicId(healthTopics[0].healthTopicId);\n    }\n  }, [healthTopics]);\n\n  useEffect(() => {\n    setDocumentData({\n      ...documentData,\n      link: uploadedLink,\n    });\n  }, [uploadedLink]);\n  const onSubmit = () => {\n    createNewProfile(\n      {\n        document: documentData,\n        relationshipId,\n        profileName,\n        age,\n        email,\n        phone,\n        gender,\n        healthIssues,\n      },\n      history\n    );\n  };\n\n  const handleInputChange = (e) => {\n    if (e.target.name === \"document\") {\n      setDocumentData({\n        ...documentData,\n        name: e.target.value,\n      });\n    }\n    if (e.target.name === \"topic\") {\n      setHealthTopicId(e.target.value);\n      setDocumentData({\n        ...documentData,\n        healthTopicId: e.target.value,\n      });\n    }\n    if (e.target.name === \"relationship\") {\n      setRelationshipId(e.target.value);\n    }\n    if (e.target.name === \"profileName\") {\n      setProfileName(e.target.value);\n    }\n    if (e.target.name === \"email\") {\n      setEmail(e.target.value);\n    }\n    if (e.target.name === \"phone\") {\n      setPhone(e.target.value);\n    }\n    if (e.target.name === \"age\") {\n      setAge(e.target.value);\n    }\n    if (e.target.name === \"gender\") {\n      setGender(e.target.value);\n    }\n  };\n  const handleCheckbox = (e, issue) => {\n    let changedArray = [];\n    if (e.target.name === \"healthIssues\") {\n      changedArray = healthIssues.map((issueSingle) => {\n        if (issue.id === issueSingle.id) {\n          issueSingle.status = e.target.checked;\n        }\n        return issueSingle;\n      });\n    }\n    setHealthIssues(changedArray);\n  };\n\n  return (\n    <>\n      <Paper className={classes.pageContent}>\n        <Grid container>\n          <Grid item xs={12} md={12} lg={12} xl={12}>\n            <UploadAvatar />s\n          </Grid>\n        </Grid>\n      </Paper>\n\n      <Paper className={classes.pageContent}>\n        <Form>\n          <Grid container>\n            <Grid item xs={12} md={6}>\n              <Controls.Input\n                name=\"profileName\"\n                label=\"Profile name *\"\n                value={profileName}\n                onChange={handleInputChange}\n                error={errors.profileName}\n              />\n              <Controls.Select\n                name=\"relationship\"\n                label=\"Relationship\"\n                value={relationshipId}\n                onChange={handleInputChange}\n                options={getRelationshipCollection()}\n                error={errors.relationship}\n              />\n              <Controls.Input\n                label=\"Email\"\n                name=\"email\"\n                value={email}\n                onChange={handleInputChange}\n                error={errors.email}\n              />\n              <Controls.Input\n                label=\"Phone\"\n                name=\"phone\"\n                value={phone}\n                onChange={handleInputChange}\n                error={errors.phone}\n              />\n              <Controls.Input\n                name=\"age\"\n                label=\"Age\"\n                value={age}\n                onChange={handleInputChange}\n                error={errors.age}\n              />\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <Controls.RadioGroup\n                name=\"gender\"\n                label=\"Gender\"\n                value={gender}\n                onChange={handleInputChange}\n                items={genderItems}\n              />\n              <FormGroup column>\n                <Typography variant=\"subtitle1\">\n                  Any other health issue\n                </Typography>\n                {healthIssues.map((issue) => (\n                  <FormControlLabel\n                    key={issue.id}\n                    control={\n                      <Checkbox\n                        checked={issue.status}\n                        onChange={(e) => {\n                          handleCheckbox(e, issue);\n                        }}\n                        name=\"healthIssues\"\n                        color=\"primary\"\n                      />\n                    }\n                    label={issue.name}\n                  />\n                ))}\n              </FormGroup>\n\n              <Controls.Button\n                style={{ display: \"block\", margin: \"0 auto\" }}\n                onClick={onSubmit}\n                text=\"Submit\"\n              />\n            </Grid>\n          </Grid>\n        </Form>\n      </Paper>\n    </>\n  );\n};\n\nCreateProfile.propTypes = {\n  fetchAllHealthTopics: PropTypes.func,\n  createNewProfile: PropTypes.func,\n  healthTopics: PropTypes.array,\n};\n\nconst mapStateToProps = (state) => ({\n  healthTopics: state.common.healthTopics,\n});\nconst mapDispatchToProps = (dispatch) => ({\n  fetchAllHealthTopics: () => dispatch(fetchAllHealthTopics()),\n  createNewProfile: (data, history) =>\n    dispatch(createNewProfile(data, history)),\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateProfile);\n\n// eslint-disable-next-line no-lone-blocks\n{\n  /* <Grid item xs={12} md={6}>\n              <Controls.RadioGroup\n                name=\"gender\"\n                label=\"Gender\"\n                value={gender}\n                onChange={handleInputChange}\n                items={genderItems}\n              />\n              <Typography variant=\"subtitle1\">Any Health Issues</Typography>\n              <Grid>\n                <Grid item xs={6} sm={3} md={6} lg={6} xl={6}>\n                  {healthIssues.length > 0 &&\n                    healthIssues.map((issue) => (\n                      <Controls.Checkbox\n                        key={issue.id}\n                        name=\"healthIssues\"\n                        label={issue.name}\n                        value={issue.status}\n                        onChange={(e, issue) => {\n                          console.log(issue);\n                          handleCheckbox(e, issue);\n                        }}\n                      />\n                    ))}\n                </Grid>\n              </Grid>\n\n              <div>\n                <Controls.Button type=\"submit\" text=\"Submit\" />\n              </div>\n            </Grid> */\n}\n"]},"metadata":{},"sourceType":"module"}