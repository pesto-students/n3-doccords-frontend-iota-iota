{"ast":null,"code":"var _jsxFileName = \"/Users/elango/Documents/pesto/iota-ninja3-doccords-frontend/src/components/login/index.js\";\n// Import FirebaseAuth and firebase.\nimport React from \"react\"; // import StyledFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\";\n\nimport firebase from \"firebase\"; // import { PROFILES } from \"navigation/constants\";\n// Configure Firebase.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDG_6b7GzDixXpfpEXwqlyY6qeg0vavTJ4\",\n  authDomain: \"doccords-55659.firebaseapp.com\",\n  projectId: \"doccords-55659\",\n  storageBucket: \"doccords-55659.appspot.com\",\n  messagingSenderId: \"352225564028\",\n  appId: \"1:352225564028:web:b762256bf74fb69c4400f9\",\n  measurementId: \"G-VGGZF4XZSZ\"\n};\nfirebase.initializeApp(firebaseConfig);\nfirebase.auth().useDeviceLanguage(); // window.recaptchaVerifier = new firebase.auth.RecaptchaVerifier(\n//   \"sign-in-button\",\n//   {\n//     size: \"invisible\",\n//     callback: (response) => {\n//       // reCAPTCHA solved, allow signInWithPhoneNumber.\n//       onSignInSubmit();\n//     },\n//   }\n// );\n// Configure FirebaseUI.\n// const uiConfig = {\n//   // Popup signin flow rather than redirect flow.\n//   signInFlow: \"popup\",\n//   // Redirect to /signedIn after sign in is successful. Alternatively you can provide a callbacks.signInSuccess function.\n//   signInSuccessUrl: PROFILES,\n//   // We will display Google and Facebook as auth providers.\n//   signInOptions: [\n//     firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n//     {\n//       provider: firebase.auth.PhoneAuthProvider.PROVIDER_ID,\n//       defaultCountry: \"IN\",\n//     },\n//   ],\n// };\n\nconst LoginView = () => {\n  const signin = () => {\n    firebase.auth().signInWithPopup(firebase.auth.GoogleAuthProvider.PROVIDER_ID).then(result => {\n      /** @type {firebase.auth.OAuthCredential} */\n      const credential = result.credential; // This gives you a Google Access Token. You can use it to access the Google API.\n\n      const token = credential.accessToken; // The signed-in user info.\n\n      const user = result.user; // ...\n\n      console.log(token, user);\n    }).catch(error => {\n      // Handle Errors here.\n      const errorCode = error.code;\n      const errorMessage = error.message; // The email of the user's account used.\n\n      const email = error.email; // The firebase.auth.AuthCredential type that was used.\n\n      const credential = error.credential; // ...\n\n      console.log(errorCode, errorMessage, email, credential);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Doccords\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Login or Signup\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: signin,\n      children: \" Signin\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n\n_c = LoginView;\nexport default LoginView;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginView\");","map":{"version":3,"sources":["/Users/elango/Documents/pesto/iota-ninja3-doccords-frontend/src/components/login/index.js"],"names":["React","firebase","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","auth","useDeviceLanguage","LoginView","signin","signInWithPopup","GoogleAuthProvider","PROVIDER_ID","then","result","credential","token","accessToken","user","console","log","catch","error","errorCode","code","errorMessage","message","email"],"mappings":";AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,QAAP,MAAqB,UAArB,C,CACA;AAEA;;;AACA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAE,yCADa;AAErBC,EAAAA,UAAU,EAAE,gCAFS;AAGrBC,EAAAA,SAAS,EAAE,gBAHU;AAIrBC,EAAAA,aAAa,EAAE,4BAJM;AAKrBC,EAAAA,iBAAiB,EAAE,cALE;AAMrBC,EAAAA,KAAK,EAAE,2CANc;AAOrBC,EAAAA,aAAa,EAAE;AAPM,CAAvB;AASAR,QAAQ,CAACS,aAAT,CAAuBR,cAAvB;AACAD,QAAQ,CAACU,IAAT,GAAgBC,iBAAhB,G,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,SAAS,GAAG,MAAM;AACtB,QAAMC,MAAM,GAAG,MAAM;AACnBb,IAAAA,QAAQ,CACLU,IADH,GAEGI,eAFH,CAEmBd,QAAQ,CAACU,IAAT,CAAcK,kBAAd,CAAiCC,WAFpD,EAGGC,IAHH,CAGSC,MAAD,IAAY;AAChB;AACA,YAAMC,UAAU,GAAGD,MAAM,CAACC,UAA1B,CAFgB,CAIhB;;AACA,YAAMC,KAAK,GAAGD,UAAU,CAACE,WAAzB,CALgB,CAMhB;;AACA,YAAMC,IAAI,GAAGJ,MAAM,CAACI,IAApB,CAPgB,CAQhB;;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ,EAAmBE,IAAnB;AACD,KAbH,EAcGG,KAdH,CAcUC,KAAD,IAAW;AAChB;AACA,YAAMC,SAAS,GAAGD,KAAK,CAACE,IAAxB;AACA,YAAMC,YAAY,GAAGH,KAAK,CAACI,OAA3B,CAHgB,CAIhB;;AACA,YAAMC,KAAK,GAAGL,KAAK,CAACK,KAApB,CALgB,CAMhB;;AACA,YAAMZ,UAAU,GAAGO,KAAK,CAACP,UAAzB,CAPgB,CAQhB;;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAYG,SAAZ,EAAuBE,YAAvB,EAAqCE,KAArC,EAA4CZ,UAA5C;AACD,KAxBH;AAyBD,GA1BD;;AA2BA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAIE;AAAQ,MAAA,OAAO,EAAEN,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CApCD;;KAAMD,S;AAsCN,eAAeA,SAAf","sourcesContent":["// Import FirebaseAuth and firebase.\nimport React from \"react\";\n// import StyledFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\";\nimport firebase from \"firebase\";\n// import { PROFILES } from \"navigation/constants\";\n\n// Configure Firebase.\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDG_6b7GzDixXpfpEXwqlyY6qeg0vavTJ4\",\n  authDomain: \"doccords-55659.firebaseapp.com\",\n  projectId: \"doccords-55659\",\n  storageBucket: \"doccords-55659.appspot.com\",\n  messagingSenderId: \"352225564028\",\n  appId: \"1:352225564028:web:b762256bf74fb69c4400f9\",\n  measurementId: \"G-VGGZF4XZSZ\",\n};\nfirebase.initializeApp(firebaseConfig);\nfirebase.auth().useDeviceLanguage();\n// window.recaptchaVerifier = new firebase.auth.RecaptchaVerifier(\n//   \"sign-in-button\",\n//   {\n//     size: \"invisible\",\n//     callback: (response) => {\n//       // reCAPTCHA solved, allow signInWithPhoneNumber.\n//       onSignInSubmit();\n//     },\n//   }\n// );\n\n// Configure FirebaseUI.\n// const uiConfig = {\n//   // Popup signin flow rather than redirect flow.\n//   signInFlow: \"popup\",\n//   // Redirect to /signedIn after sign in is successful. Alternatively you can provide a callbacks.signInSuccess function.\n//   signInSuccessUrl: PROFILES,\n//   // We will display Google and Facebook as auth providers.\n//   signInOptions: [\n//     firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n//     {\n//       provider: firebase.auth.PhoneAuthProvider.PROVIDER_ID,\n//       defaultCountry: \"IN\",\n//     },\n//   ],\n// };\n\nconst LoginView = () => {\n  const signin = () => {\n    firebase\n      .auth()\n      .signInWithPopup(firebase.auth.GoogleAuthProvider.PROVIDER_ID)\n      .then((result) => {\n        /** @type {firebase.auth.OAuthCredential} */\n        const credential = result.credential;\n\n        // This gives you a Google Access Token. You can use it to access the Google API.\n        const token = credential.accessToken;\n        // The signed-in user info.\n        const user = result.user;\n        // ...\n        console.log(token, user);\n      })\n      .catch((error) => {\n        // Handle Errors here.\n        const errorCode = error.code;\n        const errorMessage = error.message;\n        // The email of the user's account used.\n        const email = error.email;\n        // The firebase.auth.AuthCredential type that was used.\n        const credential = error.credential;\n        // ...\n        console.log(errorCode, errorMessage, email, credential);\n      });\n  };\n  return (\n    <div>\n      <h1>Doccords</h1>\n      <p>Login or Signup</p>\n      {/* <StyledFirebaseAuth uiConfig={uiConfig} firebaseAuth={firebase.auth()} /> */}\n      <button onClick={signin}> Signin</button>\n    </div>\n  );\n};\n\nexport default LoginView;\n"]},"metadata":{},"sourceType":"module"}