{"ast":null,"code":"var _jsxFileName = \"/Users/elango/Documents/pesto/iota-ninja3-doccords-frontend/src/navigation/PrivateRoute.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react/prop-types */\n// A wrapper for <Route> that redirects to the login\nimport React, { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Redirect, Route } from \"react-router-dom\";\nimport { useAuth } from \"context/AuthContext\";\nimport { fetchUserDetail } from \"apiRequests/user\"; // screen if you're not yet authenticated.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PrivateRoute = ({\n  children,\n  ...rest\n}) => {\n  _s();\n\n  // const user = useSelector((state) => state.user);\n  const {\n    currentUser\n  } = useAuth();\n  useEffect(() => {\n    fetchUserDetail();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Route, { ...rest,\n    render: () => currentUser ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [children, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"This is a protected route\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(Redirect, {\n      to: {\n        pathname: \"/login\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PrivateRoute, \"xjsLPzeME42BR/7KHmUJuKuu2iw=\", false, function () {\n  return [useAuth];\n});\n\n_c = PrivateRoute;\nexport default PrivateRoute;\n/**\n * Below code can be organized in separate files as desired.\n * I am keeping everything related to the authentication and PrivateRoute in this one file.\n */\n\n/*\nconst authContext = createContext();\nexport function ProvideAuth({ children }) {\n  const auth = useProvideAuth();\n  return (\n    <authContext.Provider value={auth}>\n      {children}\n    </authContext.Provider>\n  );\n}\n\n// Most important hook to be used throughout\nexport function useAuth() {\n  return useContext(authContext);\n}\n*/\n\n/*\nfunction useProvideAuth() {\n  const [user, setUser] = useState(null);\n\n  // signin method: It can either return a promise or execute a callback function.\n  // You can prefer to keep this in userServices.js\n  const signin = () => {\n    console.log(\"SS:: PrivateRoute > useProviderAuth > signin() called...\");\n    return new Promise((resolve, reject) => {\n      try {\n        // do db call or API endpoint axios call here and return the promise.\n        let apiResponse = {\n          \"id\": \"30\",\n          \"firstName\": \"Joel\",\n          \"lastName\": \"Joseph\",\n          \"gender\": \"Male\",\n          \"age\": 33,\n          \"isActiveEmployee\": true,\n          \"location\": \"London\"\n        };\n        setUser(apiResponse);\n        setTimeout(()=>resolve(apiResponse), 3000);\n        // resolve(apiResponse);\n      } catch (error) {\n        console.error(\"signin error!==\", error);\n        reject(\"signin error!\");\n      }\n    });\n  };\n  const signout = () => {\n    return new Promise((resolve, reject) => {\n      try {\n        // do API endpoint axios call here and return the promise.\n        setUser(null);\n        resolve(true);\n      } catch (error) {\n        console.error(\"signout error!==\", error);\n        reject(\"signout error!\");\n      }\n    });\n  };\n\n  // Firebase auth example code (ref: https://usehooks.com/useAuth/)\n  // const signin = (email, password) => {\n  //   return firebase\n  //     .auth()\n  //     .signInWithEmailAndPassword(email, password)\n  //     .then(response => {\n  //       setUser(response.user);\n  //       return response.user;\n  //     });\n  // };\n  // const signout = () => {\n  //   return firebase\n  //     .auth()\n  //     .signOut()\n  //     .then(() => {\n  //       setUser(false);\n  //     });\n  // };\n  \n  return {\n    user,\n    signin,\n    signout\n  };\n}\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"sources":["/Users/elango/Documents/pesto/iota-ninja3-doccords-frontend/src/navigation/PrivateRoute.js"],"names":["React","useEffect","useSelector","Redirect","Route","useAuth","fetchUserDetail","PrivateRoute","children","rest","currentUser","pathname"],"mappings":";;;AAAA;AACA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,QAAT,EAAmBC,KAAnB,QAAgC,kBAAhC;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,SAASC,eAAT,QAAgC,kBAAhC,C,CAEA;;;;;AACA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAY,KAAGC;AAAf,CAAD,KAA2B;AAAA;;AAC9C;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAkBL,OAAO,EAA/B;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,eAAe;AAChB,GAFQ,EAEN,EAFM,CAAT;AAGA,sBACE,QAAC,KAAD,OACMG,IADN;AAEE,IAAA,MAAM,EAAE,MACNC,WAAW,gBACT;AAAA,iBACGF,QADH,eAEE;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA,oBADS,gBAOT,QAAC,QAAD;AACE,MAAA,EAAE,EAAE;AACFG,QAAAA,QAAQ,EAAE;AADR;AADN;AAAA;AAAA;AAAA;AAAA;AAVN;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD,CA3BD;;GAAMJ,Y;UAEoBF,O;;;KAFpBE,Y;AA4BN,eAAeA,YAAf;AAEA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/* eslint-disable react/prop-types */\n// A wrapper for <Route> that redirects to the login\nimport React, { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Redirect, Route } from \"react-router-dom\";\nimport { useAuth } from \"context/AuthContext\";\nimport { fetchUserDetail } from \"apiRequests/user\";\n\n// screen if you're not yet authenticated.\nconst PrivateRoute = ({ children, ...rest }) => {\n  // const user = useSelector((state) => state.user);\n  const { currentUser } = useAuth();\n\n  useEffect(() => {\n    fetchUserDetail();\n  }, []);\n  return (\n    <Route\n      {...rest}\n      render={() =>\n        currentUser ? (\n          <>\n            {children}\n            <br />\n            <div>This is a protected route</div>\n          </>\n        ) : (\n          <Redirect\n            to={{\n              pathname: \"/login\",\n            }}\n          />\n        )\n      }\n    />\n  );\n};\nexport default PrivateRoute;\n\n/**\n * Below code can be organized in separate files as desired.\n * I am keeping everything related to the authentication and PrivateRoute in this one file.\n */\n/*\nconst authContext = createContext();\nexport function ProvideAuth({ children }) {\n  const auth = useProvideAuth();\n  return (\n    <authContext.Provider value={auth}>\n      {children}\n    </authContext.Provider>\n  );\n}\n\n// Most important hook to be used throughout\nexport function useAuth() {\n  return useContext(authContext);\n}\n*/\n\n/*\nfunction useProvideAuth() {\n  const [user, setUser] = useState(null);\n\n  // signin method: It can either return a promise or execute a callback function.\n  // You can prefer to keep this in userServices.js\n  const signin = () => {\n    console.log(\"SS:: PrivateRoute > useProviderAuth > signin() called...\");\n    return new Promise((resolve, reject) => {\n      try {\n        // do db call or API endpoint axios call here and return the promise.\n        let apiResponse = {\n          \"id\": \"30\",\n          \"firstName\": \"Joel\",\n          \"lastName\": \"Joseph\",\n          \"gender\": \"Male\",\n          \"age\": 33,\n          \"isActiveEmployee\": true,\n          \"location\": \"London\"\n        };\n        setUser(apiResponse);\n        setTimeout(()=>resolve(apiResponse), 3000);\n        // resolve(apiResponse);\n      } catch (error) {\n        console.error(\"signin error!==\", error);\n        reject(\"signin error!\");\n      }\n    });\n  };\n  const signout = () => {\n    return new Promise((resolve, reject) => {\n      try {\n        // do API endpoint axios call here and return the promise.\n        setUser(null);\n        resolve(true);\n      } catch (error) {\n        console.error(\"signout error!==\", error);\n        reject(\"signout error!\");\n      }\n    });\n  };\n\n  // Firebase auth example code (ref: https://usehooks.com/useAuth/)\n  // const signin = (email, password) => {\n  //   return firebase\n  //     .auth()\n  //     .signInWithEmailAndPassword(email, password)\n  //     .then(response => {\n  //       setUser(response.user);\n  //       return response.user;\n  //     });\n  // };\n  // const signout = () => {\n  //   return firebase\n  //     .auth()\n  //     .signOut()\n  //     .then(() => {\n  //       setUser(false);\n  //     });\n  // };\n  \n  return {\n    user,\n    signin,\n    signout\n  };\n}\n*/\n"]},"metadata":{},"sourceType":"module"}